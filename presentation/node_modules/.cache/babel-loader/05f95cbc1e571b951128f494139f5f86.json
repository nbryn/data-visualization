{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar resolveFromParentTypename_1 = require(\"./resolveFromParentTypename\");\n\nvar backcompatOptions = {\n  commentDescriptions: true\n};\n\nfunction typeFromAST(node) {\n  switch (node.kind) {\n    case graphql_1.Kind.OBJECT_TYPE_DEFINITION:\n      return makeObjectType(node);\n\n    case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:\n      return makeInterfaceType(node);\n\n    case graphql_1.Kind.ENUM_TYPE_DEFINITION:\n      return makeEnumType(node);\n\n    case graphql_1.Kind.UNION_TYPE_DEFINITION:\n      return makeUnionType(node);\n\n    case graphql_1.Kind.SCALAR_TYPE_DEFINITION:\n      return makeScalarType(node);\n\n    case graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n      return makeInputObjectType(node);\n\n    case graphql_1.Kind.DIRECTIVE_DEFINITION:\n      return makeDirective(node);\n\n    default:\n      return null;\n  }\n}\n\nexports.default = typeFromAST;\n\nfunction makeObjectType(node) {\n  return new graphql_1.GraphQLObjectType({\n    name: node.name.value,\n    fields: function fields() {\n      return makeFields(node.fields);\n    },\n    interfaces: function interfaces() {\n      return node.interfaces.map(function (iface) {\n        return createNamedStub(iface.name.value, 'interface');\n      });\n    },\n    description: graphql_1.getDescription(node, backcompatOptions)\n  });\n}\n\nfunction makeInterfaceType(node) {\n  return new graphql_1.GraphQLInterfaceType({\n    name: node.name.value,\n    fields: function fields() {\n      return makeFields(node.fields);\n    },\n    description: graphql_1.getDescription(node, backcompatOptions),\n    resolveType: function resolveType(parent, context, info) {\n      return resolveFromParentTypename_1.default(parent, info.schema);\n    }\n  });\n}\n\nfunction makeEnumType(node) {\n  var values = {};\n  node.values.forEach(function (value) {\n    values[value.name.value] = {\n      description: graphql_1.getDescription(value, backcompatOptions)\n    };\n  });\n  return new graphql_1.GraphQLEnumType({\n    name: node.name.value,\n    values: values,\n    description: graphql_1.getDescription(node, backcompatOptions)\n  });\n}\n\nfunction makeUnionType(node) {\n  return new graphql_1.GraphQLUnionType({\n    name: node.name.value,\n    types: function types() {\n      return node.types.map(function (type) {\n        return resolveType(type, 'object');\n      });\n    },\n    description: graphql_1.getDescription(node, backcompatOptions),\n    resolveType: function resolveType(parent, context, info) {\n      return resolveFromParentTypename_1.default(parent, info.schema);\n    }\n  });\n}\n\nfunction makeScalarType(node) {\n  return new graphql_1.GraphQLScalarType({\n    name: node.name.value,\n    description: graphql_1.getDescription(node, backcompatOptions),\n    serialize: function serialize() {\n      return null;\n    },\n    // Note: validation calls the parse functions to determine if a\n    // literal value is correct. Returning null would cause use of custom\n    // scalars to always fail validation. Returning false causes them to\n    // always pass validation.\n    parseValue: function parseValue() {\n      return false;\n    },\n    parseLiteral: function parseLiteral() {\n      return false;\n    }\n  });\n}\n\nfunction makeInputObjectType(node) {\n  return new graphql_1.GraphQLInputObjectType({\n    name: node.name.value,\n    fields: function fields() {\n      return makeValues(node.fields);\n    },\n    description: graphql_1.getDescription(node, backcompatOptions)\n  });\n}\n\nfunction makeFields(nodes) {\n  var result = {};\n  nodes.forEach(function (node) {\n    var deprecatedDirective = node.directives.find(function (directive) {\n      return directive && directive.name && directive.name.value === 'deprecated';\n    });\n    var deprecatedArgument = deprecatedDirective && deprecatedDirective.arguments && deprecatedDirective.arguments.find(function (arg) {\n      return arg && arg.name && arg.name.value === 'reason';\n    });\n    var deprecationReason = deprecatedArgument && deprecatedArgument.value && deprecatedArgument.value.value;\n    result[node.name.value] = {\n      type: resolveType(node.type, 'object'),\n      args: makeValues(node.arguments),\n      description: graphql_1.getDescription(node, backcompatOptions),\n      deprecationReason: deprecationReason\n    };\n  });\n  return result;\n}\n\nfunction makeValues(nodes) {\n  var result = {};\n  nodes.forEach(function (node) {\n    var type = resolveType(node.type, 'input');\n    result[node.name.value] = {\n      type: type,\n      defaultValue: graphql_1.valueFromAST(node.defaultValue, type),\n      description: graphql_1.getDescription(node, backcompatOptions)\n    };\n  });\n  return result;\n}\n\nfunction resolveType(node, type) {\n  switch (node.kind) {\n    case graphql_1.Kind.LIST_TYPE:\n      return new graphql_1.GraphQLList(resolveType(node.type, type));\n\n    case graphql_1.Kind.NON_NULL_TYPE:\n      return new graphql_1.GraphQLNonNull(resolveType(node.type, type));\n\n    default:\n      return createNamedStub(node.name.value, type);\n  }\n}\n\nfunction createNamedStub(name, type) {\n  var constructor;\n\n  if (type === 'object') {\n    constructor = graphql_1.GraphQLObjectType;\n  } else if (type === 'interface') {\n    constructor = graphql_1.GraphQLInterfaceType;\n  } else {\n    constructor = graphql_1.GraphQLInputObjectType;\n  }\n\n  return new constructor({\n    name: name,\n    fields: {\n      __fake: {\n        type: graphql_1.GraphQLString\n      }\n    }\n  });\n}\n\nfunction makeDirective(node) {\n  var locations = [];\n  node.locations.forEach(function (location) {\n    if (location.value in graphql_1.DirectiveLocation) {\n      locations.push(location.value);\n    }\n  });\n  return new graphql_1.GraphQLDirective({\n    name: node.name.value,\n    description: node.description ? node.description.value : null,\n    args: makeValues(node.arguments),\n    locations: locations\n  });\n}","map":null,"metadata":{},"sourceType":"script"}