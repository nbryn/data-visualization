{"ast":null,"code":"import _regeneratorRuntime from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ENGAGEMENT_STATS } from \"../ActionTypes\";\nimport { fetchFromServer } from \"../Fetch\";\nexport var fetchEngagementStats = function fetchEngagementStats() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var engagementStats, groupResponse, userResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                engagementStats = {\n                  groupEngagement: \"\",\n                  userEngagement: \"\"\n                };\n                _context.next = 3;\n                return fetchGroupEngagementStats();\n\n              case 3:\n                groupResponse = _context.sent;\n                engagementStats.groupEngagement = groupResponse.groupEngagement;\n                _context.next = 7;\n                return fetchUserEngagementStats();\n\n              case 7:\n                userResponse = _context.sent;\n                engagementStats.userEngagement = userResponse.userStats.usersActive;\n                dispatch({\n                  type: ENGAGEMENT_STATS,\n                  payload: engagementStats\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nfunction fetchGroupEngagementStats() {\n  return _fetchGroupEngagementStats.apply(this, arguments);\n}\n\nfunction _fetchGroupEngagementStats() {\n  _fetchGroupEngagementStats = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var groupQuery, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            groupQuery = \"query{\\n    groupEngagement{\\n      groupsActive\\n      groupMeetingFrequency{\\n        value\\n        count\\n      }\\n  \\n    }\\n  }\";\n            _context2.next = 3;\n            return fetchFromServer(\"post\", groupQuery);\n\n          case 3:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response.data.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchGroupEngagementStats.apply(this, arguments);\n}\n\nfunction fetchUserEngagementStats() {\n  return _fetchUserEngagementStats.apply(this, arguments);\n}\n\nfunction _fetchUserEngagementStats() {\n  _fetchUserEngagementStats = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var userQuery, response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            userQuery = \"query{\\n    userStats{\\n      usersActive \\n    }\\n  }\";\n            _context3.next = 3;\n            return fetchFromServer(\"post\", userQuery);\n\n          case 3:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.data.data);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchUserEngagementStats.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/src/redux/actions/kpi/EngagementStatsAction.js"],"names":["ENGAGEMENT_STATS","fetchFromServer","fetchEngagementStats","dispatch","engagementStats","groupEngagement","userEngagement","fetchGroupEngagementStats","groupResponse","fetchUserEngagementStats","userResponse","userStats","usersActive","type","payload","groupQuery","response","data","userQuery"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gBAAjC;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCC,gBAAAA,eADoC,GAClB;AACpBC,kBAAAA,eAAe,EAAE,EADG;AAEpBC,kBAAAA,cAAc,EAAE;AAFI,iBADkB;AAAA;AAAA,uBAOZC,yBAAyB,EAPb;;AAAA;AAOlCC,gBAAAA,aAPkC;AAQxCJ,gBAAAA,eAAe,CAACC,eAAhB,GAAkCG,aAAa,CAACH,eAAhD;AARwC;AAAA,uBAWbI,wBAAwB,EAXX;;AAAA;AAWlCC,gBAAAA,YAXkC;AAYxCN,gBAAAA,eAAe,CAACE,cAAhB,GAAiCI,YAAY,CAACC,SAAb,CAAuBC,WAAxD;AAEAT,gBAAAA,QAAQ,CAAC;AACPU,kBAAAA,IAAI,EAAEb,gBADC;AAEPc,kBAAAA,OAAO,EAAEV;AAFF,iBAAD,CAAR;;AAdwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;SAqBQG,yB;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQQ,YAAAA,UADR;AAAA;AAAA,mBAYyBd,eAAe,CAAC,MAAD,EAASc,UAAT,CAZxC;;AAAA;AAYQC,YAAAA,QAZR;AAAA,8CAcSA,QAAQ,CAACC,IAAT,CAAcA,IAdvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAiBeR,wB;;;;;;;2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQS,YAAAA,SADR;AAAA;AAAA,mBAOyBjB,eAAe,CAAC,MAAD,EAASiB,SAAT,CAPxC;;AAAA;AAOQF,YAAAA,QAPR;AAAA,8CASSA,QAAQ,CAACC,IAAT,CAAcA,IATvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { ENGAGEMENT_STATS } from \"../ActionTypes\";\nimport { fetchFromServer } from \"../Fetch\";\n\nexport const fetchEngagementStats = () => async dispatch => {\n  let engagementStats = {\n    groupEngagement: \"\",\n    userEngagement: \"\"\n  };\n\n  \n  const groupResponse = await fetchGroupEngagementStats();\n  engagementStats.groupEngagement = groupResponse.groupEngagement;\n\n  \n  const userResponse = await fetchUserEngagementStats();\n  engagementStats.userEngagement = userResponse.userStats.usersActive;\n\n  dispatch({\n    type: ENGAGEMENT_STATS,\n    payload: engagementStats\n  });\n};\n\n\nasync function fetchGroupEngagementStats() {\n  const groupQuery = `query{\n    groupEngagement{\n      groupsActive\n      groupMeetingFrequency{\n        value\n        count\n      }\n  \n    }\n  }`;\n\n  const response = await fetchFromServer(\"post\", groupQuery);\n\n  return response.data.data;\n}\n\nasync function fetchUserEngagementStats() {\n  const userQuery = `query{\n    userStats{\n      usersActive \n    }\n  }`;\n\n  const response = await fetchFromServer(\"post\", userQuery);\n\n  return response.data.data;\n}\n\n"]},"metadata":{},"sourceType":"module"}