{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar WrapQuery =\n/** @class */\nfunction () {\n  function WrapQuery(path, wrapper, extractor) {\n    this.path = path;\n    this.wrapper = wrapper;\n    this.extractor = extractor;\n  }\n\n  WrapQuery.prototype.transformRequest = function (originalRequest) {\n    var _a;\n\n    var _this = this;\n\n    var document = originalRequest.document;\n    var fieldPath = [];\n    var ourPath = JSON.stringify(this.path);\n    var newDocument = graphql_1.visit(document, (_a = {}, _a[graphql_1.Kind.FIELD] = {\n      enter: function enter(node) {\n        fieldPath.push(node.name.value);\n\n        if (ourPath === JSON.stringify(fieldPath)) {\n          var wrapResult = _this.wrapper(node.selectionSet); // Selection can be either a single selection or a selection set. If it's just one selection,\n          // let's wrap it in a selection set. Otherwise, keep it as is.\n\n\n          var selectionSet = wrapResult.kind === graphql_1.Kind.SELECTION_SET ? wrapResult : {\n            kind: graphql_1.Kind.SELECTION_SET,\n            selections: [wrapResult]\n          };\n          return __assign(__assign({}, node), {\n            selectionSet: selectionSet\n          });\n        }\n      },\n      leave: function leave(node) {\n        fieldPath.pop();\n      }\n    }, _a));\n    return __assign(__assign({}, originalRequest), {\n      document: newDocument\n    });\n  };\n\n  WrapQuery.prototype.transformResult = function (originalResult) {\n    var rootData = originalResult.data;\n\n    if (rootData) {\n      var data = rootData;\n\n      var path = __spreadArrays(this.path);\n\n      while (path.length > 1) {\n        var next = path.shift();\n\n        if (data[next]) {\n          data = data[next];\n        }\n      }\n\n      data[path[0]] = this.extractor(data[path[0]]);\n    }\n\n    return {\n      data: rootData,\n      errors: originalResult.errors\n    };\n  };\n\n  return WrapQuery;\n}();\n\nexports.default = WrapQuery;","map":null,"metadata":{},"sourceType":"script"}