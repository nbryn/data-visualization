{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\");\n\nfunction buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions) {\n  // TODO: accept only array here, otherwise interfaces get confusing.\n  var myDefinitions = typeDefinitions;\n  var astDocument;\n\n  if (isDocumentNode(typeDefinitions)) {\n    astDocument = typeDefinitions;\n  } else if (typeof myDefinitions !== 'string') {\n    if (!Array.isArray(myDefinitions)) {\n      var type = typeof myDefinitions;\n      throw new _1.SchemaError(\"typeDefs must be a string, array or schema AST, got \" + type);\n    }\n\n    myDefinitions = _1.concatenateTypeDefs(myDefinitions);\n  }\n\n  if (typeof myDefinitions === 'string') {\n    astDocument = graphql_1.parse(myDefinitions, parseOptions);\n  }\n\n  var backcompatOptions = {\n    commentDescriptions: true\n  }; // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n\n  var schema = graphql_1.buildASTSchema(astDocument, backcompatOptions);\n\n  var extensionsAst = _1.extractExtensionDefinitions(astDocument);\n\n  if (extensionsAst.definitions.length > 0) {\n    // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n    schema = graphql_1.extendSchema(schema, extensionsAst, backcompatOptions);\n  }\n\n  return schema;\n}\n\nfunction isDocumentNode(typeDefinitions) {\n  return typeDefinitions.kind !== undefined;\n}\n\nexports.default = buildSchemaFromTypeDefinitions;","map":null,"metadata":{},"sourceType":"script"}