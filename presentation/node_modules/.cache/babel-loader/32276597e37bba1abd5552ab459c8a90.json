{"ast":null,"code":"/*\r\n    Deprecated Decorator v0.1\r\n    https://github.com/vilic/deprecated-decorator\r\n*/\n\"use strict\";\n/** @internal */\n\nexports.options = {\n  getWarner: undefined\n};\n\nfunction createWarner(type, name, alternative, version, url) {\n  var warnedPositions = {};\n  return function () {\n    var stack = new Error().stack || '';\n    var at = (stack.match(/(?:\\s+at\\s.+){2}\\s+at\\s(.+)/) || [undefined, ''])[1];\n\n    if (/\\)$/.test(at)) {\n      at = at.match(/[^(]+(?=\\)$)/)[0];\n    } else {\n      at = at.trim();\n    }\n\n    if (at in warnedPositions) {\n      return;\n    }\n\n    warnedPositions[at] = true;\n    var message;\n\n    switch (type) {\n      case 'class':\n        message = 'Class';\n        break;\n\n      case 'property':\n        message = 'Property';\n        break;\n\n      case 'method':\n        message = 'Method';\n        break;\n\n      case 'function':\n        message = 'Function';\n        break;\n    }\n\n    message += \" `\" + name + \"` has been deprecated\";\n\n    if (version) {\n      message += \" since version \" + version;\n    }\n\n    if (alternative) {\n      message += \", use `\" + alternative + \"` instead\";\n    }\n\n    message += '.';\n\n    if (at) {\n      message += \"\\n    at \" + at;\n    }\n\n    if (url) {\n      message += \"\\nCheck out \" + url + \" for more information.\";\n    }\n\n    console.warn(message);\n  };\n}\n\nfunction decorateProperty(type, name, descriptor, alternative, version, url) {\n  var warner = (exports.options.getWarner || createWarner)(type, name, alternative, version, url);\n  descriptor = descriptor || {\n    writable: true,\n    enumerable: false,\n    configurable: true\n  };\n  var deprecatedDescriptor = {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable\n  };\n\n  if (descriptor.get || descriptor.set) {\n    if (descriptor.get) {\n      deprecatedDescriptor.get = function () {\n        warner();\n        return descriptor.get.call(this);\n      };\n    }\n\n    if (descriptor.set) {\n      deprecatedDescriptor.set = function (value) {\n        warner();\n        return descriptor.set.call(this, value);\n      };\n    }\n  } else {\n    var propertyValue_1 = descriptor.value;\n\n    deprecatedDescriptor.get = function () {\n      warner();\n      return propertyValue_1;\n    };\n\n    if (descriptor.writable) {\n      deprecatedDescriptor.set = function (value) {\n        warner();\n        propertyValue_1 = value;\n      };\n    }\n  }\n\n  return deprecatedDescriptor;\n}\n\nfunction decorateFunction(type, target, alternative, version, url) {\n  var name = target.name;\n  var warner = (exports.options.getWarner || createWarner)(type, name, alternative, version, url);\n\n  var fn = function fn() {\n    warner();\n    return target.apply(this, arguments);\n  };\n\n  for (var _i = 0, _a = Object.getOwnPropertyNames(target); _i < _a.length; _i++) {\n    var propertyName = _a[_i];\n    var descriptor = Object.getOwnPropertyDescriptor(target, propertyName);\n\n    if (descriptor.writable) {\n      fn[propertyName] = target[propertyName];\n    } else if (descriptor.configurable) {\n      Object.defineProperty(fn, propertyName, descriptor);\n    }\n  }\n\n  return fn;\n}\n\nfunction deprecated() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i - 0] = arguments[_i];\n  }\n\n  var fn = args[args.length - 1];\n\n  if (typeof fn === 'function') {\n    fn = args.pop();\n  } else {\n    fn = undefined;\n  }\n\n  var options = args[0];\n  var alternative;\n  var version;\n  var url;\n\n  if (typeof options === 'string') {\n    alternative = options;\n    version = args[1];\n    url = args[2];\n  } else if (options) {\n    alternative = options.alternative, version = options.version, url = options.url, options;\n  }\n\n  if (fn) {\n    return decorateFunction('function', fn, alternative, version, url);\n  }\n\n  return function (target, name, descriptor) {\n    if (typeof name === 'string') {\n      var type = descriptor && typeof descriptor.value === 'function' ? 'method' : 'property';\n      return decorateProperty(type, name, descriptor, alternative, version, url);\n    } else if (typeof target === 'function') {\n      var constructor = decorateFunction('class', target, alternative, version, url);\n      var className = target.name;\n\n      for (var _i = 0, _a = Object.getOwnPropertyNames(constructor); _i < _a.length; _i++) {\n        var propertyName = _a[_i];\n        var descriptor_1 = Object.getOwnPropertyDescriptor(constructor, propertyName);\n        descriptor_1 = decorateProperty('class', className, descriptor_1, alternative, version, url);\n\n        if (descriptor_1.writable) {\n          constructor[propertyName] = target[propertyName];\n        } else if (descriptor_1.configurable) {\n          Object.defineProperty(constructor, propertyName, descriptor_1);\n        }\n      }\n\n      return constructor;\n    }\n  };\n}\n\nexports.deprecated = deprecated;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deprecated;","map":null,"metadata":{},"sourceType":"script"}