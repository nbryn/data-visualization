{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar uuid = require(\"uuid\");\n\nvar makeExecutableSchema_1 = require(\"./makeExecutableSchema\"); // This function wraps addMockFunctionsToSchema for more convenience\n\n\nfunction mockServer(schema, mocks, preserveResolvers) {\n  if (preserveResolvers === void 0) {\n    preserveResolvers = false;\n  }\n\n  var mySchema;\n\n  if (!(schema instanceof graphql_1.GraphQLSchema)) {\n    // TODO: provide useful error messages here if this fails\n    mySchema = makeExecutableSchema_1.buildSchemaFromTypeDefinitions(schema);\n  } else {\n    mySchema = schema;\n  }\n\n  addMockFunctionsToSchema({\n    schema: mySchema,\n    mocks: mocks,\n    preserveResolvers: preserveResolvers\n  });\n  return {\n    query: function query(_query, vars) {\n      return graphql_1.graphql(mySchema, _query, {}, {}, vars);\n    }\n  };\n}\n\nexports.mockServer = mockServer;\nvar defaultMockMap = new Map();\ndefaultMockMap.set('Int', function () {\n  return Math.round(Math.random() * 200) - 100;\n});\ndefaultMockMap.set('Float', function () {\n  return Math.random() * 200 - 100;\n});\ndefaultMockMap.set('String', function () {\n  return 'Hello World';\n});\ndefaultMockMap.set('Boolean', function () {\n  return Math.random() > 0.5;\n});\ndefaultMockMap.set('ID', function () {\n  return uuid.v4();\n}); // TODO allow providing a seed such that lengths of list could be deterministic\n// this could be done by using casual to get a random list length if the casual\n// object is global.\n\nfunction addMockFunctionsToSchema(_a) {\n  var schema = _a.schema,\n      _b = _a.mocks,\n      mocks = _b === void 0 ? {} : _b,\n      _c = _a.preserveResolvers,\n      preserveResolvers = _c === void 0 ? false : _c;\n\n  if (!schema) {\n    throw new Error('Must provide schema to mock');\n  }\n\n  if (!(schema instanceof graphql_1.GraphQLSchema)) {\n    throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n  }\n\n  if (!isObject(mocks)) {\n    throw new Error('mocks must be of type Object');\n  } // use Map internally, because that API is nicer.\n\n\n  var mockFunctionMap = new Map();\n  Object.keys(mocks).forEach(function (typeName) {\n    mockFunctionMap.set(typeName, mocks[typeName]);\n  });\n  mockFunctionMap.forEach(function (mockFunction, mockTypeName) {\n    if (typeof mockFunction !== 'function') {\n      throw new Error(\"mockFunctionMap[\" + mockTypeName + \"] must be a function\");\n    }\n  });\n\n  var mockType = function mockType(type, typeName, fieldName) {\n    // order of precendence for mocking:\n    // 1. if the object passed in already has fieldName, just use that\n    // --> if it's a function, that becomes your resolver\n    // --> if it's a value, the mock resolver will return that\n    // 2. if the nullableType is a list, recurse\n    // 2. if there's a mock defined for this typeName, that will be used\n    // 3. if there's no mock defined, use the default mocks for this type\n    return function (root, args, context, info) {\n      // nullability doesn't matter for the purpose of mocking.\n      var fieldType = graphql_1.getNullableType(type);\n      var namedFieldType = graphql_1.getNamedType(fieldType);\n\n      if (root && typeof root[fieldName] !== 'undefined') {\n        var result = void 0; // if we're here, the field is already defined\n\n        if (typeof root[fieldName] === 'function') {\n          result = root[fieldName](root, args, context, info);\n\n          if (result instanceof MockList) {\n            result = result.mock(root, args, context, info, fieldType, mockType);\n          }\n        } else {\n          result = root[fieldName];\n        } // Now we merge the result with the default mock for this type.\n        // This allows overriding defaults while writing very little code.\n\n\n        if (mockFunctionMap.has(namedFieldType.name)) {\n          result = mergeMocks(mockFunctionMap.get(namedFieldType.name).bind(null, root, args, context, info), result);\n        }\n\n        return result;\n      }\n\n      if (fieldType instanceof graphql_1.GraphQLList || fieldType instanceof graphql_1.GraphQLNonNull) {\n        return [mockType(fieldType.ofType)(root, args, context, info), mockType(fieldType.ofType)(root, args, context, info)];\n      }\n\n      if (mockFunctionMap.has(fieldType.name) && !(fieldType instanceof graphql_1.GraphQLUnionType || fieldType instanceof graphql_1.GraphQLInterfaceType)) {\n        // the object passed doesn't have this field, so we apply the default mock\n        return mockFunctionMap.get(fieldType.name)(root, args, context, info);\n      }\n\n      if (fieldType instanceof graphql_1.GraphQLObjectType) {\n        // objects don't return actual data, we only need to mock scalars!\n        return {};\n      } // if a mock function is provided for unionType or interfaceType, execute it to resolve the concrete type\n      // otherwise randomly pick a type from all implementation types\n\n\n      if (fieldType instanceof graphql_1.GraphQLUnionType || fieldType instanceof graphql_1.GraphQLInterfaceType) {\n        var implementationType = void 0;\n\n        if (mockFunctionMap.has(fieldType.name)) {\n          var interfaceMockObj = mockFunctionMap.get(fieldType.name)(root, args, context, info);\n\n          if (!interfaceMockObj || !interfaceMockObj.__typename) {\n            return Error(\"Please return a __typename in \\\"\" + fieldType.name + \"\\\"\");\n          }\n\n          implementationType = schema.getType(interfaceMockObj.__typename);\n        } else {\n          var possibleTypes = schema.getPossibleTypes(fieldType);\n          implementationType = getRandomElement(possibleTypes);\n        }\n\n        return Object.assign({\n          __typename: implementationType\n        }, mockType(implementationType)(root, args, context, info));\n      }\n\n      if (fieldType instanceof graphql_1.GraphQLEnumType) {\n        return getRandomElement(fieldType.getValues()).value;\n      }\n\n      if (defaultMockMap.has(fieldType.name)) {\n        return defaultMockMap.get(fieldType.name)(root, args, context, info);\n      } // if we get to here, we don't have a value, and we don't have a mock for this type,\n      // we could return undefined, but that would be hard to debug, so we throw instead.\n      // however, we returning it instead of throwing it, so preserveResolvers can handle the failures.\n\n\n      return Error(\"No mock defined for type \\\"\" + fieldType.name + \"\\\"\");\n    };\n  };\n\n  makeExecutableSchema_1.forEachField(schema, function (field, typeName, fieldName) {\n    assignResolveType(field.type, preserveResolvers);\n    var mockResolver; // we have to handle the root mutation and root query types differently,\n    // because no resolver is called at the root.\n\n    /* istanbul ignore next: Must provide schema DefinitionNode with query type or a type named Query. */\n\n    var isOnQueryType = schema.getQueryType() && schema.getQueryType().name === typeName;\n    var isOnMutationType = schema.getMutationType() && schema.getMutationType().name === typeName;\n\n    if (isOnQueryType || isOnMutationType) {\n      if (mockFunctionMap.has(typeName)) {\n        var rootMock_1 = mockFunctionMap.get(typeName); // XXX: BUG in here, need to provide proper signature for rootMock.\n\n        if (typeof rootMock_1(undefined, {}, {}, {})[fieldName] === 'function') {\n          mockResolver = function mockResolver(root, args, context, info) {\n            var updatedRoot = root || {}; // TODO: should we clone instead?\n\n            updatedRoot[fieldName] = rootMock_1(root, args, context, info)[fieldName]; // XXX this is a bit of a hack to still use mockType, which\n            // lets you mock lists etc. as well\n            // otherwise we could just set field.resolve to rootMock()[fieldName]\n            // it's like pretending there was a resolve function that ran before\n            // the root resolve function.\n\n            return mockType(field.type, typeName, fieldName)(updatedRoot, args, context, info);\n          };\n        }\n      }\n    }\n\n    if (!mockResolver) {\n      mockResolver = mockType(field.type, typeName, fieldName);\n    }\n\n    if (!preserveResolvers || !field.resolve) {\n      field.resolve = mockResolver;\n    } else {\n      var oldResolver_1 = field.resolve;\n\n      field.resolve = function (rootObject, args, context, info) {\n        return Promise.all([mockResolver(rootObject, args, context, info), oldResolver_1(rootObject, args, context, info)]).then(function (values) {\n          var mockedValue = values[0],\n              resolvedValue = values[1]; // In case we couldn't mock\n\n          if (mockedValue instanceof Error) {\n            // only if value was not resolved, populate the error.\n            if (undefined === resolvedValue) {\n              throw mockedValue;\n            }\n\n            return resolvedValue;\n          }\n\n          if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n            return undefined !== resolvedValue ? resolvedValue : mockedValue;\n          }\n\n          if (isObject(mockedValue) && isObject(resolvedValue)) {\n            // Object.assign() won't do here, as we need to all properties, including\n            // the non-enumerable ones and defined using Object.defineProperty\n            var emptyObject = Object.create(Object.getPrototypeOf(resolvedValue));\n            return copyOwnProps(emptyObject, resolvedValue, mockedValue);\n          }\n\n          return undefined !== resolvedValue ? resolvedValue : mockedValue;\n        });\n      };\n    }\n  });\n}\n\nexports.addMockFunctionsToSchema = addMockFunctionsToSchema;\n\nfunction isObject(thing) {\n  return thing === Object(thing) && !Array.isArray(thing);\n} // returns a random element from that ary\n\n\nfunction getRandomElement(ary) {\n  var sample = Math.floor(Math.random() * ary.length);\n  return ary[sample];\n}\n\nfunction mergeObjects(a, b) {\n  return Object.assign(a, b);\n}\n\nfunction copyOwnPropsIfNotPresent(target, source) {\n  Object.getOwnPropertyNames(source).forEach(function (prop) {\n    if (!Object.getOwnPropertyDescriptor(target, prop)) {\n      Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n    }\n  });\n}\n\nfunction copyOwnProps(target) {\n  var sources = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    sources[_i - 1] = arguments[_i];\n  }\n\n  sources.forEach(function (source) {\n    var chain = source;\n\n    while (chain) {\n      copyOwnPropsIfNotPresent(target, chain);\n      chain = Object.getPrototypeOf(chain);\n    }\n  });\n  return target;\n} // takes either an object or a (possibly nested) array\n// and completes the customMock object with any fields\n// defined on genericMock\n// only merges objects or arrays. Scalars are returned as is\n\n\nfunction mergeMocks(genericMockFunction, customMock) {\n  if (Array.isArray(customMock)) {\n    return customMock.map(function (el) {\n      return mergeMocks(genericMockFunction, el);\n    });\n  }\n\n  if (isObject(customMock)) {\n    return mergeObjects(genericMockFunction(), customMock);\n  }\n\n  return customMock;\n}\n\nfunction getResolveType(namedFieldType) {\n  if (namedFieldType instanceof graphql_1.GraphQLInterfaceType || namedFieldType instanceof graphql_1.GraphQLUnionType) {\n    return namedFieldType.resolveType;\n  } else {\n    return undefined;\n  }\n}\n\nfunction assignResolveType(type, preserveResolvers) {\n  var fieldType = graphql_1.getNullableType(type);\n  var namedFieldType = graphql_1.getNamedType(fieldType);\n  var oldResolveType = getResolveType(namedFieldType);\n\n  if (preserveResolvers && oldResolveType && oldResolveType.length) {\n    return;\n  }\n\n  if (namedFieldType instanceof graphql_1.GraphQLUnionType || namedFieldType instanceof graphql_1.GraphQLInterfaceType) {\n    // the default `resolveType` always returns null. We add a fallback\n    // resolution that works with how unions and interface are mocked\n    namedFieldType.resolveType = function (data, context, info) {\n      return info.schema.getType(data.__typename);\n    };\n  }\n}\n\nvar MockList =\n/** @class */\nfunction () {\n  // wrappedFunction can return another MockList or a value\n  function MockList(len, wrappedFunction) {\n    this.len = len;\n\n    if (typeof wrappedFunction !== 'undefined') {\n      if (typeof wrappedFunction !== 'function') {\n        throw new Error('Second argument to MockList must be a function or undefined');\n      }\n\n      this.wrappedFunction = wrappedFunction;\n    }\n  }\n\n  MockList.prototype.mock = function (root, args, context, info, fieldType, mockTypeFunc) {\n    var arr;\n\n    if (Array.isArray(this.len)) {\n      arr = new Array(this.randint(this.len[0], this.len[1]));\n    } else {\n      arr = new Array(this.len);\n    }\n\n    for (var i = 0; i < arr.length; i++) {\n      if (typeof this.wrappedFunction === 'function') {\n        var res = this.wrappedFunction(root, args, context, info);\n\n        if (res instanceof MockList) {\n          var nullableType = graphql_1.getNullableType(fieldType.ofType);\n          arr[i] = res.mock(root, args, context, info, nullableType, mockTypeFunc);\n        } else {\n          arr[i] = res;\n        }\n      } else {\n        arr[i] = mockTypeFunc(fieldType.ofType)(root, args, context, info);\n      }\n    }\n\n    return arr;\n  };\n\n  MockList.prototype.randint = function (low, high) {\n    return Math.floor(Math.random() * (high - low + 1) + low);\n  };\n\n  return MockList;\n}();\n\nexports.MockList = MockList;","map":null,"metadata":{},"sourceType":"script"}