{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar AddArgumentsAsVariablesTransform =\n/** @class */\nfunction () {\n  function AddArgumentsAsVariablesTransform(schema, args) {\n    this.schema = schema;\n    this.args = args;\n  }\n\n  AddArgumentsAsVariablesTransform.prototype.transformRequest = function (originalRequest) {\n    var _a = addVariablesToRootField(this.schema, originalRequest.document, this.args),\n        document = _a.document,\n        newVariables = _a.newVariables;\n\n    var variables = __assign(__assign({}, originalRequest.variables), newVariables);\n\n    return {\n      document: document,\n      variables: variables\n    };\n  };\n\n  return AddArgumentsAsVariablesTransform;\n}();\n\nexports.default = AddArgumentsAsVariablesTransform;\n\nfunction addVariablesToRootField(targetSchema, document, args) {\n  var operations = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.OPERATION_DEFINITION;\n  });\n  var fragments = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION;\n  });\n  var variableNames = {};\n  var newOperations = operations.map(function (operation) {\n    var existingVariables = operation.variableDefinitions.map(function (variableDefinition) {\n      return variableDefinition.variable.name.value;\n    });\n    var variableCounter = 0;\n    var variables = {};\n\n    var generateVariableName = function generateVariableName(argName) {\n      var varName;\n\n      do {\n        varName = \"_v\" + variableCounter + \"_\" + argName;\n        variableCounter++;\n      } while (existingVariables.indexOf(varName) !== -1);\n\n      return varName;\n    };\n\n    var type;\n\n    if (operation.operation === 'subscription') {\n      type = targetSchema.getSubscriptionType();\n    } else if (operation.operation === 'mutation') {\n      type = targetSchema.getMutationType();\n    } else {\n      type = targetSchema.getQueryType();\n    }\n\n    var newSelectionSet = [];\n    operation.selectionSet.selections.forEach(function (selection) {\n      if (selection.kind === graphql_1.Kind.FIELD) {\n        var newArgs_1 = {};\n        selection.arguments.forEach(function (argument) {\n          newArgs_1[argument.name.value] = argument;\n        });\n        var name_1 = selection.name.value;\n        var field = type.getFields()[name_1];\n        field.args.forEach(function (argument) {\n          if (argument.name in args) {\n            var variableName = generateVariableName(argument.name);\n            variableNames[argument.name] = variableName;\n            newArgs_1[argument.name] = {\n              kind: graphql_1.Kind.ARGUMENT,\n              name: {\n                kind: graphql_1.Kind.NAME,\n                value: argument.name\n              },\n              value: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                  kind: graphql_1.Kind.NAME,\n                  value: variableName\n                }\n              }\n            };\n            existingVariables.push(variableName);\n            variables[variableName] = {\n              kind: graphql_1.Kind.VARIABLE_DEFINITION,\n              variable: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                  kind: graphql_1.Kind.NAME,\n                  value: variableName\n                }\n              },\n              type: typeToAst(argument.type)\n            };\n          }\n        });\n        newSelectionSet.push(__assign(__assign({}, selection), {\n          arguments: Object.keys(newArgs_1).map(function (argName) {\n            return newArgs_1[argName];\n          })\n        }));\n      } else {\n        newSelectionSet.push(selection);\n      }\n    });\n    return __assign(__assign({}, operation), {\n      variableDefinitions: operation.variableDefinitions.concat(Object.keys(variables).map(function (varName) {\n        return variables[varName];\n      })),\n      selectionSet: {\n        kind: graphql_1.Kind.SELECTION_SET,\n        selections: newSelectionSet\n      }\n    });\n  });\n  var newVariables = {};\n  Object.keys(variableNames).forEach(function (name) {\n    newVariables[variableNames[name]] = args[name];\n  });\n  return {\n    document: __assign(__assign({}, document), {\n      definitions: __spreadArrays(newOperations, fragments)\n    }),\n    newVariables: newVariables\n  };\n}\n\nfunction typeToAst(type) {\n  if (type instanceof graphql_1.GraphQLNonNull) {\n    var innerType = typeToAst(type.ofType);\n\n    if (innerType.kind === graphql_1.Kind.LIST_TYPE || innerType.kind === graphql_1.Kind.NAMED_TYPE) {\n      return {\n        kind: graphql_1.Kind.NON_NULL_TYPE,\n        type: innerType\n      };\n    } else {\n      throw new Error('Incorrent inner non-null type');\n    }\n  } else if (type instanceof graphql_1.GraphQLList) {\n    return {\n      kind: graphql_1.Kind.LIST_TYPE,\n      type: typeToAst(type.ofType)\n    };\n  } else {\n    return {\n      kind: graphql_1.Kind.NAMED_TYPE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: type.toString()\n      }\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"script"}