{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar transforms_1 = require(\"../transforms/transforms\");\n\nvar AddArgumentsAsVariables_1 = require(\"../transforms/AddArgumentsAsVariables\");\n\nvar FilterToSchema_1 = require(\"../transforms/FilterToSchema\");\n\nvar AddTypenameToAbstract_1 = require(\"../transforms/AddTypenameToAbstract\");\n\nvar CheckResultAndHandleErrors_1 = require(\"../transforms/CheckResultAndHandleErrors\");\n\nvar mapAsyncIterator_1 = require(\"./mapAsyncIterator\");\n\nvar ExpandAbstractTypes_1 = require(\"../transforms/ExpandAbstractTypes\");\n\nvar ReplaceFieldWithFragment_1 = require(\"../transforms/ReplaceFieldWithFragment\");\n\nvar ConvertEnumResponse_1 = require(\"../transforms/ConvertEnumResponse\");\n\nfunction delegateToSchema(options) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  if (options instanceof graphql_1.GraphQLSchema) {\n    throw new Error('Passing positional arguments to delegateToSchema is a deprecated. ' + 'Please pass named parameters instead.');\n  }\n\n  return delegateToSchemaImplementation(options);\n}\n\nexports.default = delegateToSchema;\n\nfunction delegateToSchemaImplementation(options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var info, _a, args, operation, rawDocument, rawRequest, transforms, processedRequest, errors, _b, executionResult;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          info = options.info, _a = options.args, args = _a === void 0 ? {} : _a;\n          operation = options.operation || info.operation.operation;\n          rawDocument = createDocument(options.fieldName, operation, info.fieldNodes, Object.keys(info.fragments).map(function (fragmentName) {\n            return info.fragments[fragmentName];\n          }), info.operation.variableDefinitions, info.operation.name);\n          rawRequest = {\n            document: rawDocument,\n            variables: info.variableValues\n          };\n          transforms = __spreadArrays(options.transforms || [], [new ExpandAbstractTypes_1.default(info.schema, options.schema)]);\n\n          if (info.mergeInfo && info.mergeInfo.fragments) {\n            transforms.push(new ReplaceFieldWithFragment_1.default(options.schema, info.mergeInfo.fragments));\n          }\n\n          transforms = transforms.concat([new AddArgumentsAsVariables_1.default(options.schema, args), new FilterToSchema_1.default(options.schema), new AddTypenameToAbstract_1.default(options.schema), new CheckResultAndHandleErrors_1.default(info, options.fieldName)]);\n\n          if (graphql_1.isEnumType(options.info.returnType)) {\n            transforms = transforms.concat(new ConvertEnumResponse_1.default(options.info.returnType));\n          }\n\n          processedRequest = transforms_1.applyRequestTransforms(rawRequest, transforms);\n\n          if (!options.skipValidation) {\n            errors = graphql_1.validate(options.schema, processedRequest.document);\n\n            if (errors.length > 0) {\n              throw errors;\n            }\n          }\n\n          if (!(operation === 'query' || operation === 'mutation')) return [3\n          /*break*/\n          , 2];\n          _b = transforms_1.applyResultTransforms;\n          return [4\n          /*yield*/\n          , graphql_1.execute(options.schema, processedRequest.document, info.rootValue, options.context, processedRequest.variables)];\n\n        case 1:\n          return [2\n          /*return*/\n          , _b.apply(void 0, [_c.sent(), transforms])];\n\n        case 2:\n          if (!(operation === 'subscription')) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , graphql_1.subscribe(options.schema, processedRequest.document, info.rootValue, options.context, processedRequest.variables)];\n\n        case 3:\n          executionResult = _c.sent(); // \"subscribe\" to the subscription result and map the result through the transforms\n\n          return [2\n          /*return*/\n          , mapAsyncIterator_1.default(executionResult, function (result) {\n            var _a;\n\n            var transformedResult = transforms_1.applyResultTransforms(result, transforms);\n            var subscriptionKey = Object.keys(result.data)[0]; // for some reason the returned transformedResult needs to be nested inside the root subscription field\n            // does not work otherwise...\n\n            return _a = {}, _a[subscriptionKey] = transformedResult, _a;\n          })];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction createDocument(targetField, targetOperation, originalSelections, fragments, variables, operationName) {\n  var selections = [];\n  var args = [];\n  originalSelections.forEach(function (field) {\n    var fieldSelections = field.selectionSet ? field.selectionSet.selections : [];\n    selections = selections.concat(fieldSelections);\n    args = args.concat(field.arguments || []);\n  });\n  var selectionSet = null;\n\n  if (selections.length > 0) {\n    selectionSet = {\n      kind: graphql_1.Kind.SELECTION_SET,\n      selections: selections\n    };\n  }\n\n  var rootField = {\n    kind: graphql_1.Kind.FIELD,\n    alias: null,\n    arguments: args,\n    selectionSet: selectionSet,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: targetField\n    }\n  };\n  var rootSelectionSet = {\n    kind: graphql_1.Kind.SELECTION_SET,\n    selections: [rootField]\n  };\n  var operationDefinition = {\n    kind: graphql_1.Kind.OPERATION_DEFINITION,\n    operation: targetOperation,\n    variableDefinitions: variables,\n    selectionSet: rootSelectionSet,\n    name: operationName\n  };\n  return {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: __spreadArrays([operationDefinition], fragments)\n  };\n}","map":null,"metadata":{},"sourceType":"script"}