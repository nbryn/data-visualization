{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\");\n\nfunction assertResolveFunctionsPresent(schema, resolverValidationOptions) {\n  if (resolverValidationOptions === void 0) {\n    resolverValidationOptions = {};\n  }\n\n  var _a = resolverValidationOptions.requireResolversForArgs,\n      requireResolversForArgs = _a === void 0 ? false : _a,\n      _b = resolverValidationOptions.requireResolversForNonScalar,\n      requireResolversForNonScalar = _b === void 0 ? false : _b,\n      _c = resolverValidationOptions.requireResolversForAllFields,\n      requireResolversForAllFields = _c === void 0 ? false : _c;\n\n  if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n    throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' + 'Please configure either requireResolversForAllFields or requireResolversForArgs / ' + 'requireResolversForNonScalar, but not a combination of them.');\n  }\n\n  _1.forEachField(schema, function (field, typeName, fieldName) {\n    // requires a resolve function for *every* field.\n    if (requireResolversForAllFields) {\n      expectResolveFunction(field, typeName, fieldName);\n    } // requires a resolve function on every field that has arguments\n\n\n    if (requireResolversForArgs && field.args.length > 0) {\n      expectResolveFunction(field, typeName, fieldName);\n    } // requires a resolve function on every field that returns a non-scalar type\n\n\n    if (requireResolversForNonScalar && !(graphql_1.getNamedType(field.type) instanceof graphql_1.GraphQLScalarType)) {\n      expectResolveFunction(field, typeName, fieldName);\n    }\n  });\n}\n\nfunction expectResolveFunction(field, typeName, fieldName) {\n  if (!field.resolve) {\n    console.warn( // tslint:disable-next-line: max-line-length\n    \"Resolve function missing for \\\"\" + typeName + \".\" + fieldName + \"\\\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131\");\n    return;\n  }\n\n  if (typeof field.resolve !== 'function') {\n    throw new _1.SchemaError(\"Resolver \\\"\" + typeName + \".\" + fieldName + \"\\\" must be a function\");\n  }\n}\n\nexports.default = assertResolveFunctionsPresent;","map":null,"metadata":{},"sourceType":"script"}