{"ast":null,"code":"import { USERS_STATS, USERS_LAST_YEAR, USERS_GENDER } from \"../ActionTypes\";\nimport axios from \"axios\";\nimport { setTokenInHeader } from \"../../../security/Token\";\nconst url = \"http://localhost:4000/graphql\";\nexport const fetchUserStats = () => async dispatch => {\n  const data = \"query {\\n        userStats   \\n        }\";\n  setTokenInHeader();\n  let response;\n\n  try {\n    response = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: data\n      }\n    });\n\n    if (response.data.errors) {\n      return response.data.errors[0].extensions.code;\n    } else {\n      dispatch({\n        type: USERS_STATS,\n        payload: response.data.data.userStats\n      });\n    }\n\n    return response.data.data.userStats;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchUsersLastYear = () => async dispatch => {\n  const data = \"query{\\n        usersLastYear{\\n          data{\\n            month\\n            count\\n          }\\n        }\\n      }\";\n  let response;\n\n  try {\n    response = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: data\n      }\n    });\n    dispatch({\n      type: USERS_LAST_YEAR,\n      payload: response.data.data.usersLastYear\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const fetchUserGender = () => async dispatch => {\n  const data = \"query{\\n    userGender{\\n    value\\n    count\\n    }\\n  }\";\n  let response;\n\n  try {\n    response = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: data\n      }\n    });\n    dispatch({\n      type: USERS_GENDER,\n      payload: response.data.data.userGender\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["/home/nbryn/Desktop/JamiiPay/jamiipay-web-dashboard/presentation/src/redux/actions/KPI/UserStatsActions.js"],"names":["USERS_STATS","USERS_LAST_YEAR","USERS_GENDER","axios","setTokenInHeader","url","fetchUserStats","dispatch","data","response","method","query","errors","extensions","code","type","payload","userStats","err","console","log","fetchUsersLastYear","usersLastYear","fetchUserGender","userGender"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,YAAvC,QAA4D,gBAA5D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,yBAAjC;AAEA,MAAMC,GAAG,GAAG,+BAAZ;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACpD,QAAMC,IAAI,6CAAV;AAIAJ,EAAAA,gBAAgB;AAEhB,MAAIK,QAAJ;;AAEA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,KAAK,CAAC;AACrBE,MAAAA,GADqB;AAErBK,MAAAA,MAAM,EAAE,MAFa;AAGrBF,MAAAA,IAAI,EAAE;AACJG,QAAAA,KAAK,EAAEH;AADH;AAHe,KAAD,CAAtB;;AAQA,QAAIC,QAAQ,CAACD,IAAT,CAAcI,MAAlB,EAA0B;AACxB,aAAOH,QAAQ,CAACD,IAAT,CAAcI,MAAd,CAAqB,CAArB,EAAwBC,UAAxB,CAAmCC,IAA1C;AACD,KAFD,MAEO;AACLP,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEf,WADC;AAEPgB,QAAAA,OAAO,EAAEP,QAAQ,CAACD,IAAT,CAAcA,IAAd,CAAmBS;AAFrB,OAAD,CAAR;AAID;;AAED,WAAOR,QAAQ,CAACD,IAAT,CAAcA,IAAd,CAAmBS,SAA1B;AACD,GAnBD,CAmBE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CA/BM;AAiCP,OAAO,MAAMG,kBAAkB,GAAG,MAAM,MAAMd,QAAN,IAAkB;AACxD,QAAMC,IAAI,2HAAV;AASA,MAAIC,QAAJ;;AAEA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,KAAK,CAAC;AACrBE,MAAAA,GADqB;AAErBK,MAAAA,MAAM,EAAE,MAFa;AAGrBF,MAAAA,IAAI,EAAE;AACJG,QAAAA,KAAK,EAAEH;AADH;AAHe,KAAD,CAAtB;AAQAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEd,eADC;AAEPe,MAAAA,OAAO,EAAEP,QAAQ,CAACD,IAAT,CAAcA,IAAd,CAAmBc;AAFrB,KAAD,CAAR;AAID,GAbD,CAaE,OAAOJ,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CA5BM;AA8BP,OAAO,MAAMK,eAAe,GAAG,MAAM,MAAMhB,QAAN,IAAkB;AACrD,QAAMC,IAAI,8DAAV;AAOA,MAAIC,QAAJ;;AAEA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMN,KAAK,CAAC;AACrBE,MAAAA,GADqB;AAErBK,MAAAA,MAAM,EAAE,MAFa;AAGrBF,MAAAA,IAAI,EAAE;AACJG,QAAAA,KAAK,EAAEH;AADH;AAHe,KAAD,CAAtB;AAQAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEb,YADC;AAEPc,MAAAA,OAAO,EAAEP,QAAQ,CAACD,IAAT,CAAcA,IAAd,CAAmBgB;AAFrB,KAAD,CAAR;AAID,GAbD,CAaE,OAAON,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CA1BM","sourcesContent":["import { USERS_STATS, USERS_LAST_YEAR, USERS_GENDER  } from \"../ActionTypes\";\nimport axios from \"axios\";\n\nimport { setTokenInHeader } from \"../../../security/Token\";\n\nconst url = \"http://localhost:4000/graphql\";\n\nexport const fetchUserStats = () => async dispatch => {\n  const data = `query {\n        userStats   \n        }`;\n\n  setTokenInHeader();\n\n  let response;\n\n  try {\n    response = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: data\n      }\n    });\n\n    if (response.data.errors) {\n      return response.data.errors[0].extensions.code;\n    } else {\n      dispatch({\n        type: USERS_STATS,\n        payload: response.data.data.userStats\n      });\n    }\n\n    return response.data.data.userStats;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchUsersLastYear = () => async dispatch => {\n  const data = `query{\n        usersLastYear{\n          data{\n            month\n            count\n          }\n        }\n      }`;\n\n  let response;\n\n  try {\n    response = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: data\n      }\n    });\n\n    dispatch({\n      type: USERS_LAST_YEAR,\n      payload: response.data.data.usersLastYear\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchUserGender = () => async dispatch => {\n  const data = `query{\n    userGender{\n    value\n    count\n    }\n  }`;\n\n  let response;\n\n  try {\n    response = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: data\n      }\n    });\n\n    dispatch({\n      type: USERS_GENDER,\n      payload: response.data.data.userGender\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}