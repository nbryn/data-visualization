{"ast":null,"code":"var _jsxFileName = \"/home/nbryn/Desktop/Dashboard/presentation/src/components/dashboard/views/GroupView.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { KPICard } from \"../util/KPICard\";\nimport Sidebar from \"../../navigation/Sidebar\";\nimport Header from \"../../navigation/Header\";\nimport TotalGraph from \"../charts/graph/TotalGraph\";\nimport SizeChart from \"../charts/circle/SizeChart\";\nimport TopBar from \"../charts/bar/TopBar\";\nimport LastMonthBar from \"../charts/bar/LastMonthBar\";\nimport LastYearBar from \"../charts/bar/LastYearBar\";\nimport { fetchGroupStats } from \"../../../redux/actions/kpi/GroupStatsAction\";\nimport { getCurrentTime } from \"../../../util/Date\";\n\nclass GroupView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.fetchData();\n    setInterval(async () => {\n      this.fetchData();\n    }, 10000000);\n  }\n\n  async fetchData() {\n    await this.props.fetchGroupStats();\n    const groupStats = this.props.groupStats;\n    const lastMonth = groupStats.groupsLastMonth.data;\n    const lastUpdatedAt = getCurrentTime();\n    let groupMonthCount = 0;\n    let groupYearCount = 0;\n    console.log(this.props);\n    lastMonth.forEach(element => groupMonthCount += element.count);\n    groupStats.groupsLastYear.data.forEach(element => groupYearCount += element.count);\n    this.setState({\n      groupsTotal: groupStats.groupTotal,\n      groupsToday: lastMonth[lastMonth.length - 1].count,\n      groupsTodayText: lastMonth[lastMonth.length - 1].day.day + \"/\" + lastMonth[lastMonth.length - 1].day.month,\n      groupsLastMonthTotal: groupMonthCount,\n      groupsLastYearTotal: groupYearCount,\n      groupSize: groupStats.groupSize,\n      groupsLastMonth: lastMonth,\n      groupsLastYear: groupStats.groupsLastYear.data,\n      groupsPerCountry: groupStats.groupsCountry,\n      groupsPerNGO: groupStats.groupsNGO,\n      lastUpdate: lastUpdatedAt\n    });\n  }\n\n  render() {\n    const KPICards = {\n      groupsTotal: {\n        text: \"Total Groups\",\n        icon: \"pe-7s-graph1 text-danger\"\n      },\n      groupsToday: {\n        text: `Groups ${this.state.groupsTodayText}`,\n        icon: \"pe-7s-users text-info\"\n      },\n      groupsLastMonthTotal: {\n        text: \"Last Month\",\n        icon: \"pe-7s-graph1 text-danger\"\n      },\n      groupsLastYearTotal: {\n        text: \"Last Year\",\n        icon: \"pe-7s-graph1 text-danger\"\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"main-panel\",\n      className: \"main-panel\",\n      ref: \"mainPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Header, {\n      title: \"Groups\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, Object.keys(KPICards).map((kpi, index) => React.createElement(Col, {\n      lg: 3,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(KPICard, {\n      bigIcon: React.createElement(\"i\", {\n        className: KPICards[kpi].icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }),\n      statsText: KPICards[kpi].text,\n      statsValue: this.state[kpi],\n      statsIcon: React.createElement(\"i\", {\n        className: \"fa fa-refresh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }),\n      statsIconText: `Last Update: ${this.state.lastUpdate}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(TotalGraph, {\n      title: \"Total Groups\",\n      stroke: \"#228b22\",\n      data: this.state.groupsLastYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(TopBar, {\n      title: \"Groups Per Country\",\n      xLabel: \"Countries\",\n      yLabel: \"Groups\",\n      color: \"#ff0000\",\n      data: this.state.groupsPerCountry,\n      css: \"card-graph card-stats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(TopBar, {\n      title: \"Groups Per NGO\",\n      xLabel: \"NGOs\",\n      yLabel: \"Groups\",\n      color: \"#ff0000\",\n      data: this.state.groupsPerNGO,\n      css: \"card-graph card-stats\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(LastMonthBar, {\n      title: \"Groups Last Month\",\n      color: \"#228b22\",\n      xLabel: \"Days\",\n      yLabel: \"Groups\",\n      data: this.state.groupsLastMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(SizeChart, {\n      title: \"Group Size\",\n      colors: [\"#a4de6c\", \"#67b6ed\", \"#8884d8\", \"#ff0000\", \"#2196f3\", \"#228b22\"],\n      data: this.state.groupSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(LastYearBar, {\n      title: \"Groups Last Year\",\n      color: \"#2196f3\",\n      xLabel: \"Months\",\n      yLabel: \"Groups\",\n      data: this.state.groupsLastYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    groupStats: state.KPI.groupStats\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchGroupStats\n})(GroupView);","map":{"version":3,"sources":["/home/nbryn/Desktop/Dashboard/presentation/src/components/dashboard/views/GroupView.js"],"names":["React","Component","connect","Grid","Row","Col","KPICard","Sidebar","Header","TotalGraph","SizeChart","TopBar","LastMonthBar","LastYearBar","fetchGroupStats","getCurrentTime","GroupView","constructor","props","state","componentDidMount","fetchData","setInterval","groupStats","lastMonth","groupsLastMonth","data","lastUpdatedAt","groupMonthCount","groupYearCount","console","log","forEach","element","count","groupsLastYear","setState","groupsTotal","groupTotal","groupsToday","length","groupsTodayText","day","month","groupsLastMonthTotal","groupsLastYearTotal","groupSize","groupsPerCountry","groupsCountry","groupsPerNGO","groupsNGO","lastUpdate","render","KPICards","text","icon","Object","keys","map","kpi","index","mapStateToProps","KPI"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { KPICard } from \"../util/KPICard\";\n\nimport Sidebar from \"../../navigation/Sidebar\";\nimport Header from \"../../navigation/Header\";\n\nimport TotalGraph from \"../charts/graph/TotalGraph\";\nimport SizeChart from \"../charts/circle/SizeChart\";\n\nimport TopBar from \"../charts/bar/TopBar\";\nimport LastMonthBar from \"../charts/bar/LastMonthBar\";\nimport LastYearBar from \"../charts/bar/LastYearBar\";\n\nimport { fetchGroupStats } from \"../../../redux/actions/kpi/GroupStatsAction\";\nimport { getCurrentTime } from \"../../../util/Date\";\n\nclass GroupView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n  componentDidMount() {\n    this.fetchData();\n\n    setInterval(async () => {\n      this.fetchData();\n    }, 10000000);\n  }\n\n  async fetchData() {\n    await this.props.fetchGroupStats();\n\n    const groupStats = this.props.groupStats;\n    const lastMonth = groupStats.groupsLastMonth.data;\n    const lastUpdatedAt = getCurrentTime();\n\n    let groupMonthCount = 0;\n    let groupYearCount = 0;\n\n    console.log(this.props);\n\n    lastMonth.forEach(element => (groupMonthCount += element.count));\n    groupStats.groupsLastYear.data.forEach(\n      element => (groupYearCount += element.count)\n    );\n\n    this.setState({\n      groupsTotal: groupStats.groupTotal,\n      groupsToday: lastMonth[lastMonth.length - 1].count,\n      groupsTodayText:\n        lastMonth[lastMonth.length - 1].day.day +\n        \"/\" +\n        lastMonth[lastMonth.length - 1].day.month,\n      groupsLastMonthTotal: groupMonthCount,\n      groupsLastYearTotal: groupYearCount,\n      groupSize: groupStats.groupSize,\n      groupsLastMonth: lastMonth,\n      groupsLastYear: groupStats.groupsLastYear.data,\n      groupsPerCountry: groupStats.groupsCountry,\n      groupsPerNGO: groupStats.groupsNGO,\n      lastUpdate: lastUpdatedAt\n    });\n  }\n\n  render() {\n    const KPICards = {\n      groupsTotal: { text: \"Total Groups\", icon: \"pe-7s-graph1 text-danger\" },\n      groupsToday: {\n        text: `Groups ${this.state.groupsTodayText}`,\n        icon: \"pe-7s-users text-info\"\n      },\n      groupsLastMonthTotal: {\n        text: \"Last Month\",\n        icon: \"pe-7s-graph1 text-danger\"\n      },\n      groupsLastYearTotal: {\n        text: \"Last Year\",\n        icon: \"pe-7s-graph1 text-danger\"\n      }\n    };\n    return (\n      <div className=\"wrapper\">\n        <Sidebar />\n        <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\n          <Header title=\"Groups\" />\n          <div className=\"content\">\n            <Grid fluid>\n              <Row>\n                {Object.keys(KPICards).map((kpi, index) => (\n                  <Col lg={3} sm={6}>\n                    <KPICard\n                      bigIcon={<i className={KPICards[kpi].icon} />}\n                      statsText={KPICards[kpi].text}\n                      statsValue={this.state[kpi]}\n                      statsIcon={<i className=\"fa fa-refresh\" />}\n                      statsIconText={`Last Update: ${this.state.lastUpdate}`}\n                    />\n                  </Col>\n                ))}\n              </Row>\n\n              <Row>\n                <Col lg={4} sm={6}>\n                  <TotalGraph\n                    title=\"Total Groups\"\n                    stroke=\"#228b22\"\n                    data={this.state.groupsLastYear}\n                  />\n                </Col>\n                <Col lg={4} sm={6}>\n                  <TopBar\n                    title=\"Groups Per Country\"\n                    xLabel=\"Countries\"\n                    yLabel=\"Groups\"\n                    color=\"#ff0000\"\n                    data={this.state.groupsPerCountry}\n                    css=\"card-graph card-stats\"\n                  />\n                </Col>\n                <Col lg={4} sm={6}>\n                  <TopBar\n                    title=\"Groups Per NGO\"\n                    xLabel=\"NGOs\"\n                    yLabel=\"Groups\"\n                    color=\"#ff0000\"\n                    data={this.state.groupsPerNGO}\n                    css=\"card-graph card-stats\"\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col lg={4} sm={6}>\n                  <LastMonthBar\n                    title=\"Groups Last Month\"\n                    color=\"#228b22\"\n                    xLabel=\"Days\"\n                    yLabel=\"Groups\"\n                    data={this.state.groupsLastMonth}\n                  />\n                </Col>\n                <Col lg={4} sm={6}>\n                  <SizeChart\n                    title=\"Group Size\"\n                    colors={[\n                      \"#a4de6c\",\n                      \"#67b6ed\",\n                      \"#8884d8\",\n                      \"#ff0000\",\n                      \"#2196f3\",\n                      \"#228b22\"\n                    ]}\n                    data={this.state.groupSize}\n                  />\n                </Col>\n                <Col lg={4} sm={6}>\n                  <LastYearBar\n                    title=\"Groups Last Year\"\n                    color=\"#2196f3\"\n                    xLabel=\"Months\"\n                    yLabel=\"Groups\"\n                    data={this.state.groupsLastYear}\n                  />\n                </Col>\n              </Row>\n            </Grid>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    groupStats: state.KPI.groupStats\n  };\n};\n\nexport default connect(mapStateToProps, { fetchGroupStats })(GroupView);\n"]},"metadata":{},"sourceType":"module"}