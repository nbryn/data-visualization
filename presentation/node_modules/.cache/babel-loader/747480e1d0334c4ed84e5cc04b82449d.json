{"ast":null,"code":"function __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar schemaVisitor_1 = require(\"./schemaVisitor\");\n\nvar mergeDeep_1 = require(\"./mergeDeep\");\n\nvar generate_1 = require(\"./generate\");\n\nfunction makeExecutableSchema(_a) {\n  var typeDefs = _a.typeDefs,\n      _b = _a.resolvers,\n      resolvers = _b === void 0 ? {} : _b,\n      connectors = _a.connectors,\n      logger = _a.logger,\n      _c = _a.allowUndefinedInResolve,\n      allowUndefinedInResolve = _c === void 0 ? true : _c,\n      _d = _a.resolverValidationOptions,\n      resolverValidationOptions = _d === void 0 ? {} : _d,\n      _e = _a.directiveResolvers,\n      directiveResolvers = _e === void 0 ? null : _e,\n      _f = _a.schemaDirectives,\n      schemaDirectives = _f === void 0 ? null : _f,\n      _g = _a.parseOptions,\n      parseOptions = _g === void 0 ? {} : _g,\n      _h = _a.inheritResolversFromInterfaces,\n      inheritResolversFromInterfaces = _h === void 0 ? false : _h; // Validate and clean up arguments\n\n  if (typeof resolverValidationOptions !== 'object') {\n    throw new generate_1.SchemaError('Expected `resolverValidationOptions` to be an object');\n  }\n\n  if (!typeDefs) {\n    throw new generate_1.SchemaError('Must provide typeDefs');\n  }\n\n  if (!resolvers) {\n    throw new generate_1.SchemaError('Must provide resolvers');\n  } // We allow passing in an array of resolver maps, in which case we merge them\n\n\n  var resolverMap = Array.isArray(resolvers) ? resolvers.filter(function (resolverObj) {\n    return typeof resolverObj === 'object';\n  }).reduce(mergeDeep_1.default, {}) : resolvers; // Arguments are now validated and cleaned up\n\n  var schema = generate_1.buildSchemaFromTypeDefinitions(typeDefs, parseOptions);\n  schema = generate_1.addResolveFunctionsToSchema({\n    schema: schema,\n    resolvers: resolverMap,\n    resolverValidationOptions: resolverValidationOptions,\n    inheritResolversFromInterfaces: inheritResolversFromInterfaces\n  });\n  generate_1.assertResolveFunctionsPresent(schema, resolverValidationOptions);\n\n  if (!allowUndefinedInResolve) {\n    addCatchUndefinedToSchema(schema);\n  }\n\n  if (logger) {\n    addErrorLoggingToSchema(schema, logger);\n  }\n\n  if (typeof resolvers['__schema'] === 'function') {\n    // TODO a bit of a hack now, better rewrite generateSchema to attach it there.\n    // not doing that now, because I'd have to rewrite a lot of tests.\n    generate_1.addSchemaLevelResolveFunction(schema, resolvers['__schema']);\n  }\n\n  if (connectors) {\n    // connectors are optional, at least for now. That means you can just import them in the resolve\n    // function if you want.\n    generate_1.attachConnectorsToContext(schema, connectors);\n  }\n\n  if (directiveResolvers) {\n    generate_1.attachDirectiveResolvers(schema, directiveResolvers);\n  }\n\n  if (schemaDirectives) {\n    schemaVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(schema, schemaDirectives);\n  }\n\n  return schema;\n}\n\nexports.makeExecutableSchema = makeExecutableSchema;\n\nfunction decorateToCatchUndefined(fn, hint) {\n  if (typeof fn === 'undefined') {\n    fn = graphql_1.defaultFieldResolver;\n  }\n\n  return function (root, args, ctx, info) {\n    var result = fn(root, args, ctx, info);\n\n    if (typeof result === 'undefined') {\n      throw new Error(\"Resolve function for \\\"\" + hint + \"\\\" returned undefined\");\n    }\n\n    return result;\n  };\n}\n\nfunction addCatchUndefinedToSchema(schema) {\n  generate_1.forEachField(schema, function (field, typeName, fieldName) {\n    var errorHint = typeName + \".\" + fieldName;\n    field.resolve = decorateToCatchUndefined(field.resolve, errorHint);\n  });\n}\n\nexports.addCatchUndefinedToSchema = addCatchUndefinedToSchema;\n\nfunction addErrorLoggingToSchema(schema, logger) {\n  if (!logger) {\n    throw new Error('Must provide a logger');\n  }\n\n  if (typeof logger.log !== 'function') {\n    throw new Error('Logger.log must be a function');\n  }\n\n  generate_1.forEachField(schema, function (field, typeName, fieldName) {\n    var errorHint = typeName + \".\" + fieldName;\n    field.resolve = generate_1.decorateWithLogger(field.resolve, logger, errorHint);\n  });\n}\n\nexports.addErrorLoggingToSchema = addErrorLoggingToSchema;\n\n__export(require(\"./generate\"));","map":null,"metadata":{},"sourceType":"script"}