{"ast":null,"code":"var _jsxFileName = \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/src/components/dashboard/views/EngagementView.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { KPICard } from \"../util/KPICard\";\nimport Sidebar from \"../../navigation/Sidebar\";\nimport Header from \"../../navigation/Header\";\nimport TotalGraph from \"../charts/graph/TotalGraph\";\nimport SizeChart from \"../charts/circle/SizeChart\";\nimport LastMonthBar from \"../charts/bar/LastMonthBar\";\nimport LastYearBar from \"../charts/bar/LastYearBar\";\nimport { fetchEngagementStats } from \"../../../redux/actions/kpi/EngagementStatsAction\";\nimport { getCurrentTime } from \"../../../util/Date\";\n\nclass EngagementView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      groupsActive: \"\",\n      groupActivity: \"\",\n      usersActive: \"\",\n      lastUpdate: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n    setInterval(async () => {\n      this.fetchData();\n    }, 10000000);\n  }\n\n  async fetchData() {\n    await this.props.fetchEngagementStats();\n    const lastUpdatedAt = getCurrentTime();\n    const engagementStats = this.props.engagementStats;\n    this.setState({\n      groupsActive: engagementStats.groupEngagement.groupsActive,\n      groupActivity: engagementStats.groupEngagement.groupMeetingFrequency,\n      usersActive: engagementStats.userEngagement,\n      ngosActive: \"\",\n      meetings: \"\",\n      lastUpdate: lastUpdatedAt\n    });\n  }\n\n  render() {\n    const KPICards = {\n      usersActive: {\n        text: \"Active Users\",\n        icon: \"pe-7s-graph1 text-danger\"\n      },\n      groupsActive: {\n        text: \"Active Groups\",\n        icon: \"pe-7s-users text-info\"\n      },\n      ngosActive: {\n        text: \"Active NGO's\",\n        icon: \"pe-7s-users text-info\"\n      },\n      meetings: {\n        text: \"Meetings in Active Groups\",\n        icon: \"pe-7s-users text-info\"\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"main-panel\",\n      className: \"main-panel\",\n      ref: \"mainPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Header, {\n      title: \"Engagement\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, Object.keys(KPICards).map((kpi, index) => React.createElement(Col, {\n      lg: 3,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(KPICard, {\n      bigIcon: React.createElement(\"i\", {\n        className: KPICards[kpi].icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }),\n      statsText: KPICards[kpi].text,\n      statsValue: this.state[kpi],\n      statsIcon: React.createElement(\"i\", {\n        className: \"fa fa-refresh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }),\n      statsIconText: `Last Update: ${this.state.lastUpdate}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(TotalGraph, {\n      title: \"Engagement\",\n      stroke: \"#228b22\",\n      data: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(LastMonthBar, {\n      title: \"Engagement\",\n      color: \"#228b22\",\n      data: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(SizeChart, {\n      title: \"Months Since Last Meeting\",\n      colors: [\"#ff0000\", \"#1828E8\", \"#228b22\", \"#2196f3\"],\n      data: this.state.groupActivity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    engagementStats: state.KPI.engagementStats\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchEngagementStats\n})(EngagementView);","map":{"version":3,"sources":["/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/src/components/dashboard/views/EngagementView.js"],"names":["React","Component","connect","Grid","Row","Col","KPICard","Sidebar","Header","TotalGraph","SizeChart","LastMonthBar","LastYearBar","fetchEngagementStats","getCurrentTime","EngagementView","constructor","props","state","groupsActive","groupActivity","usersActive","lastUpdate","componentDidMount","fetchData","setInterval","lastUpdatedAt","engagementStats","setState","groupEngagement","groupMeetingFrequency","userEngagement","ngosActive","meetings","render","KPICards","text","icon","Object","keys","map","kpi","index","mapStateToProps","KPI"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { KPICard } from \"../util/KPICard\";\n\nimport Sidebar from \"../../navigation/Sidebar\";\nimport Header from \"../../navigation/Header\";\n\nimport TotalGraph from \"../charts/graph/TotalGraph\";\nimport SizeChart from \"../charts/circle/SizeChart\";\n\nimport LastMonthBar from \"../charts/bar/LastMonthBar\";\nimport LastYearBar from \"../charts/bar/LastYearBar\";\n\nimport { fetchEngagementStats } from \"../../../redux/actions/kpi/EngagementStatsAction\";\nimport { getCurrentTime } from \"../../../util/Date\";\n\nclass EngagementView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      groupsActive: \"\",\n      groupActivity: \"\",\n      usersActive: \"\",\n      lastUpdate: \"\"\n    };\n  }\n  componentDidMount() {\n    this.fetchData();\n\n    setInterval(async () => {\n      this.fetchData();\n    }, 10000000);\n  }\n\n  async fetchData() {\n    await this.props.fetchEngagementStats();\n\n    const lastUpdatedAt = getCurrentTime();\n\n    const engagementStats = this.props.engagementStats;\n\n    this.setState({\n      groupsActive: engagementStats.groupEngagement.groupsActive,\n      groupActivity: engagementStats.groupEngagement.groupMeetingFrequency,\n      usersActive: engagementStats.userEngagement,\n      ngosActive: \"\",\n      meetings: \"\",\n\n      lastUpdate: lastUpdatedAt\n    });\n  }\n\n  render() {\n    const KPICards = {\n      usersActive: { text: \"Active Users\", icon: \"pe-7s-graph1 text-danger\" },\n      groupsActive: { text: \"Active Groups\", icon: \"pe-7s-users text-info\" },\n      ngosActive: {\n        text: \"Active NGO's\",\n        icon: \"pe-7s-users text-info\"\n      },\n      meetings: {\n        text: \"Meetings in Active Groups\",\n        icon: \"pe-7s-users text-info\"\n      }\n    };\n    return (\n      <div className=\"wrapper\">\n        <Sidebar />\n        <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\n          <Header title=\"Engagement\" />\n          <div className=\"content\">\n            <Grid fluid>\n              <Row>\n                {Object.keys(KPICards).map((kpi, index) => (\n                  <Col lg={3} sm={6}>\n                    <KPICard\n                      bigIcon={<i className={KPICards[kpi].icon} />}\n                      statsText={KPICards[kpi].text}\n                      statsValue={this.state[kpi]}\n                      statsIcon={<i className=\"fa fa-refresh\" />}\n                      statsIconText={`Last Update: ${this.state.lastUpdate}`}\n                    />\n                  </Col>\n                ))}\n              </Row>\n\n              <Row>\n                <Col lg={4} sm={6}>\n                  <TotalGraph title=\"Engagement\" stroke=\"#228b22\" data=\"\" />\n                </Col>\n              </Row>\n              <Row>\n                <Col lg={4} sm={6}>\n                  <LastMonthBar title=\"Engagement\" color=\"#228b22\" data=\"\" />\n                </Col>\n                <Col lg={4} sm={6}>\n                  <SizeChart\n                    title=\"Months Since Last Meeting\"\n                    colors={[\"#ff0000\", \"#1828E8\", \"#228b22\", \"#2196f3\"]}\n                    data={this.state.groupActivity}\n                  />\n                </Col>\n              </Row>\n            </Grid>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    engagementStats: state.KPI.engagementStats\n  };\n};\n\nexport default connect(mapStateToProps, { fetchEngagementStats })(\n  EngagementView\n);\n"]},"metadata":{},"sourceType":"module"}