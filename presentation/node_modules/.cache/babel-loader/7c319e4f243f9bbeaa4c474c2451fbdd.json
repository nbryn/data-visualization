{"ast":null,"code":"import _regeneratorRuntime from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { KEY_STATS } from \"../ActionTypes\";\nvar url = \"/graphql\";\nexport var fetchKeyStats = function fetchKeyStats() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var groupResponse, userResponse, meetingResponse, shareResponse, keyStats, groupQuery, userQuery, meetingQuery;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                keyStats = {\n                  groupStats: \"\",\n                  userStats: \"\",\n                  genderStats: \"\",\n                  shareStats: \"\",\n                  meetingStats: \"\"\n                };\n                groupQuery = \"query{\\n    groupStats{\\n      groupTotal    \\n     groupsLastMonth{\\n        data{\\n          count\\n          day{\\n            year\\n            month\\n            day\\n          }     \\n        }\\n    }\\n    groupsLastYear{\\n        data{\\n          month\\n          count  \\n        }\\n      }\\n      \\n    }\\n    }\";\n                _context.next = 5;\n                return axios({\n                  url: url,\n                  method: \"post\",\n                  data: {\n                    query: groupQuery\n                  }\n                });\n\n              case 5:\n                groupResponse = _context.sent;\n                console.log(groupResponse);\n                keyStats.groupStats = groupResponse.data.data.groupStats;\n                userQuery = \"query{\\n      userStats{\\n        userCount   \\n        userGender{\\n          value\\n          count\\n         }\\n        usersLastYear{\\n          data{\\n            month\\n            count\\n          }\\n        }       \\n      }\\n      }\";\n                _context.next = 11;\n                return axios({\n                  url: url,\n                  method: \"post\",\n                  data: {\n                    query: userQuery\n                  }\n                });\n\n              case 11:\n                userResponse = _context.sent;\n                keyStats.userStats = userResponse.data.data.userStats;\n                meetingQuery = \"query {\\n      meetingStats{\\n        meetingTotal\\n        meetingsLastYear{\\n          data{\\n            month\\n            count\\n          }\\n        }            \\n      }\\n    }\";\n                _context.next = 16;\n                return axios({\n                  url: url,\n                  method: \"post\",\n                  data: {\n                    query: meetingQuery\n                  }\n                });\n\n              case 16:\n                meetingResponse = _context.sent;\n                console.log(meetingResponse);\n                keyStats.meetingStats = meetingResponse.data.data.meetingStats; // let response;\n                // response = await axios({\n                //   url,\n                //   method: \"post\",\n                //   data: {\n                //     query: data\n                //   }\n                // });\n                // dispatch({\n                //   type: KEY_STATS,\n                //   payload: response.data.data.keyStats\n                // });\n\n                _context.next = 24;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 21]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/src/redux/actions/kpi/KeyStatsAction.js"],"names":["axios","KEY_STATS","url","fetchKeyStats","dispatch","keyStats","groupStats","userStats","genderStats","shareStats","meetingStats","groupQuery","method","data","query","groupResponse","console","log","userQuery","userResponse","meetingQuery","meetingResponse"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,IAAMC,GAAG,GAAG,UAAZ;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI3BC,gBAAAA,QAJ2B,GAIhB;AACbC,kBAAAA,UAAU,EAAE,EADC;AAEbC,kBAAAA,SAAS,EAAE,EAFE;AAGbC,kBAAAA,WAAW,EAAE,EAHA;AAIbC,kBAAAA,UAAU,EAAE,EAJC;AAKbC,kBAAAA,YAAY,EAAE;AALD,iBAJgB;AAYzBC,gBAAAA,UAZyB;AAAA;AAAA,uBAmCTX,KAAK,CAAC;AAC1BE,kBAAAA,GAAG,EAAHA,GAD0B;AAE1BU,kBAAAA,MAAM,EAAE,MAFkB;AAG1BC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAEH;AADH;AAHoB,iBAAD,CAnCI;;AAAA;AAmC/BI,gBAAAA,aAnC+B;AA2C/BC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AAEAV,gBAAAA,QAAQ,CAACC,UAAT,GAAsBS,aAAa,CAACF,IAAd,CAAmBA,IAAnB,CAAwBP,UAA9C;AAIMY,gBAAAA,SAjDyB;AAAA;AAAA,uBAiEVlB,KAAK,CAAC;AACzBE,kBAAAA,GAAG,EAAHA,GADyB;AAEzBU,kBAAAA,MAAM,EAAE,MAFiB;AAGzBC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAEI;AADH;AAHmB,iBAAD,CAjEK;;AAAA;AAiE/BC,gBAAAA,YAjE+B;AAyE/Bd,gBAAAA,QAAQ,CAACE,SAAT,GAAqBY,YAAY,CAACN,IAAb,CAAkBA,IAAlB,CAAuBN,SAA5C;AAEMa,gBAAAA,YA3EyB;AAAA;AAAA,uBAuFPpB,KAAK,CAAC;AAC5BE,kBAAAA,GAAG,EAAHA,GAD4B;AAE5BU,kBAAAA,MAAM,EAAE,MAFoB;AAG5BC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAEM;AADH;AAHsB,iBAAD,CAvFE;;AAAA;AAuF/BC,gBAAAA,eAvF+B;AA+F/BL,gBAAAA,OAAO,CAACC,GAAR,CAAYI,eAAZ;AAEAhB,gBAAAA,QAAQ,CAACK,YAAT,GAAwBW,eAAe,CAACR,IAAhB,CAAqBA,IAArB,CAA0BH,YAAlD,CAjG+B,CAmG/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAhH+B;AAAA;;AAAA;AAAA;AAAA;AAkH/BM,gBAAAA,OAAO,CAACC,GAAR;;AAlH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import axios from \"axios\";\nimport { KEY_STATS } from \"../ActionTypes\";\n\nconst url = \"/graphql\";\n\nexport const fetchKeyStats = () => async dispatch => {\n  let groupResponse, userResponse, meetingResponse, shareResponse;\n\n  try {\n    let keyStats = {\n      groupStats: \"\",\n      userStats: \"\",\n      genderStats: \"\",\n      shareStats: \"\",\n      meetingStats: \"\"\n    };\n\n    const groupQuery = `query{\n    groupStats{\n      groupTotal    \n     groupsLastMonth{\n        data{\n          count\n          day{\n            year\n            month\n            day\n          }     \n        }\n    }\n    groupsLastYear{\n        data{\n          month\n          count  \n        }\n      }\n      \n    }\n    }`;\n\n    groupResponse = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: groupQuery\n      }\n    });\n\n    console.log(groupResponse);\n\n    keyStats.groupStats = groupResponse.data.data.groupStats;\n\n\n\n    const userQuery = `query{\n      userStats{\n        userCount   \n        userGender{\n          value\n          count\n         }\n        usersLastYear{\n          data{\n            month\n            count\n          }\n        }       \n      }\n      }`;\n\n    userResponse = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: userQuery\n      }\n    });\n\n    keyStats.userStats = userResponse.data.data.userStats;\n\n    const meetingQuery = `query {\n      meetingStats{\n        meetingTotal\n        meetingsLastYear{\n          data{\n            month\n            count\n          }\n        }            \n      }\n    }`;\n\n    meetingResponse = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: meetingQuery\n      }\n    });\n\n    console.log(meetingResponse);\n\n    keyStats.meetingStats = meetingResponse.data.data.meetingStats;\n\n    // let response;\n\n    // response = await axios({\n    //   url,\n    //   method: \"post\",\n    //   data: {\n    //     query: data\n    //   }\n    // });\n\n    // dispatch({\n    //   type: KEY_STATS,\n    //   payload: response.data.data.keyStats\n    // });\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}