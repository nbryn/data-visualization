{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar isSpecifiedScalarType_1 = require(\"../isSpecifiedScalarType\");\n\nvar resolveFromParentTypename_1 = require(\"./resolveFromParentTypename\");\n\nvar defaultMergedResolver_1 = require(\"./defaultMergedResolver\");\n\nfunction recreateType(type, resolveType, keepResolvers) {\n  if (type instanceof graphql_1.GraphQLObjectType) {\n    var fields_1 = type.getFields();\n    var interfaces_1 = type.getInterfaces();\n    return new graphql_1.GraphQLObjectType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      isTypeOf: keepResolvers ? type.isTypeOf : undefined,\n      fields: function fields() {\n        return fieldMapToFieldConfigMap(fields_1, resolveType, keepResolvers);\n      },\n      interfaces: function interfaces() {\n        return interfaces_1.map(function (iface) {\n          return resolveType(iface);\n        });\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLInterfaceType) {\n    var fields_2 = type.getFields();\n    return new graphql_1.GraphQLInterfaceType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      fields: function fields() {\n        return fieldMapToFieldConfigMap(fields_2, resolveType, keepResolvers);\n      },\n      resolveType: keepResolvers ? type.resolveType : function (parent, context, info) {\n        return resolveFromParentTypename_1.default(parent, info.schema);\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLUnionType) {\n    return new graphql_1.GraphQLUnionType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      types: function types() {\n        return type.getTypes().map(function (unionMember) {\n          return resolveType(unionMember);\n        });\n      },\n      resolveType: keepResolvers ? type.resolveType : function (parent, context, info) {\n        return resolveFromParentTypename_1.default(parent, info.schema);\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLInputObjectType) {\n    return new graphql_1.GraphQLInputObjectType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      fields: function fields() {\n        return inputFieldMapToFieldConfigMap(type.getFields(), resolveType);\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLEnumType) {\n    var values = type.getValues();\n    var newValues_1 = {};\n    values.forEach(function (value) {\n      newValues_1[value.name] = {\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        description: value.description,\n        astNode: value.astNode\n      };\n    });\n    return new graphql_1.GraphQLEnumType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      values: newValues_1\n    });\n  } else if (type instanceof graphql_1.GraphQLScalarType) {\n    if (keepResolvers || isSpecifiedScalarType_1.default(type)) {\n      return type;\n    } else {\n      return new graphql_1.GraphQLScalarType({\n        name: type.name,\n        description: type.description,\n        astNode: type.astNode,\n        serialize: function serialize(value) {\n          return value;\n        },\n        parseValue: function parseValue(value) {\n          return value;\n        },\n        parseLiteral: function parseLiteral(ast) {\n          return _parseLiteral(ast);\n        }\n      });\n    }\n  } else {\n    throw new Error(\"Invalid type \" + type);\n  }\n}\n\nexports.recreateType = recreateType;\n\nfunction recreateDirective(directive, resolveType) {\n  return new graphql_1.GraphQLDirective({\n    name: directive.name,\n    description: directive.description,\n    locations: directive.locations,\n    args: argsToFieldConfigArgumentMap(directive.args, resolveType),\n    astNode: directive.astNode\n  });\n}\n\nexports.recreateDirective = recreateDirective;\n\nfunction _parseLiteral(ast) {\n  switch (ast.kind) {\n    case graphql_1.Kind.STRING:\n    case graphql_1.Kind.BOOLEAN:\n      {\n        return ast.value;\n      }\n\n    case graphql_1.Kind.INT:\n    case graphql_1.Kind.FLOAT:\n      {\n        return parseFloat(ast.value);\n      }\n\n    case graphql_1.Kind.OBJECT:\n      {\n        var value_1 = Object.create(null);\n        ast.fields.forEach(function (field) {\n          value_1[field.name.value] = _parseLiteral(field.value);\n        });\n        return value_1;\n      }\n\n    case graphql_1.Kind.LIST:\n      {\n        return ast.values.map(_parseLiteral);\n      }\n\n    default:\n      return null;\n  }\n}\n\nfunction fieldMapToFieldConfigMap(fields, resolveType, keepResolvers) {\n  var result = {};\n  Object.keys(fields).forEach(function (name) {\n    var field = fields[name];\n    var type = resolveType(field.type);\n\n    if (type !== null) {\n      result[name] = fieldToFieldConfig(fields[name], resolveType, keepResolvers);\n    }\n  });\n  return result;\n}\n\nexports.fieldMapToFieldConfigMap = fieldMapToFieldConfigMap;\n\nfunction createResolveType(getType) {\n  var resolveType = function resolveType(type) {\n    if (type instanceof graphql_1.GraphQLList) {\n      var innerType = resolveType(type.ofType);\n\n      if (innerType === null) {\n        return null;\n      } else {\n        return new graphql_1.GraphQLList(innerType);\n      }\n    } else if (type instanceof graphql_1.GraphQLNonNull) {\n      var innerType = resolveType(type.ofType);\n\n      if (innerType === null) {\n        return null;\n      } else {\n        return new graphql_1.GraphQLNonNull(innerType);\n      }\n    } else if (graphql_1.isNamedType(type)) {\n      var typeName = graphql_1.getNamedType(type).name;\n\n      switch (typeName) {\n        case graphql_1.GraphQLInt.name:\n          return graphql_1.GraphQLInt;\n\n        case graphql_1.GraphQLFloat.name:\n          return graphql_1.GraphQLFloat;\n\n        case graphql_1.GraphQLString.name:\n          return graphql_1.GraphQLString;\n\n        case graphql_1.GraphQLBoolean.name:\n          return graphql_1.GraphQLBoolean;\n\n        case graphql_1.GraphQLID.name:\n          return graphql_1.GraphQLID;\n\n        default:\n          return getType(typeName, type);\n      }\n    } else {\n      return type;\n    }\n  };\n\n  return resolveType;\n}\n\nexports.createResolveType = createResolveType;\n\nfunction fieldToFieldConfig(field, resolveType, keepResolvers) {\n  return {\n    type: resolveType(field.type),\n    args: argsToFieldConfigArgumentMap(field.args, resolveType),\n    resolve: keepResolvers ? field.resolve : defaultMergedResolver_1.default,\n    subscribe: keepResolvers ? field.subscribe : null,\n    description: field.description,\n    deprecationReason: field.deprecationReason,\n    astNode: field.astNode\n  };\n}\n\nexports.fieldToFieldConfig = fieldToFieldConfig;\n\nfunction argsToFieldConfigArgumentMap(args, resolveType) {\n  var result = {};\n  args.forEach(function (arg) {\n    var newArg = argumentToArgumentConfig(arg, resolveType);\n\n    if (newArg) {\n      result[newArg[0]] = newArg[1];\n    }\n  });\n  return result;\n}\n\nexports.argsToFieldConfigArgumentMap = argsToFieldConfigArgumentMap;\n\nfunction argumentToArgumentConfig(argument, resolveType) {\n  var type = resolveType(argument.type);\n\n  if (type === null) {\n    return null;\n  } else {\n    return [argument.name, {\n      type: type,\n      defaultValue: argument.defaultValue,\n      description: argument.description\n    }];\n  }\n}\n\nexports.argumentToArgumentConfig = argumentToArgumentConfig;\n\nfunction inputFieldMapToFieldConfigMap(fields, resolveType) {\n  var result = {};\n  Object.keys(fields).forEach(function (name) {\n    var field = fields[name];\n    var type = resolveType(field.type);\n\n    if (type !== null) {\n      result[name] = inputFieldToFieldConfig(fields[name], resolveType);\n    }\n  });\n  return result;\n}\n\nexports.inputFieldMapToFieldConfigMap = inputFieldMapToFieldConfigMap;\n\nfunction inputFieldToFieldConfig(field, resolveType) {\n  return {\n    type: resolveType(field.type),\n    defaultValue: field.defaultValue,\n    description: field.description,\n    astNode: field.astNode\n  };\n}\n\nexports.inputFieldToFieldConfig = inputFieldToFieldConfig;","map":null,"metadata":{},"sourceType":"script"}