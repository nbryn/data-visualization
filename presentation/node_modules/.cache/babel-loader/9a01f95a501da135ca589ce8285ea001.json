{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar error_1 = require(\"graphql/error\");\n\nvar errors_1 = require(\"./errors\");\n\nvar getResponseKeyFromInfo_1 = require(\"./getResponseKeyFromInfo\"); // Resolver that knows how to:\n// a) handle aliases for proxied schemas\n// b) handle errors from proxied schemas\n\n\nvar defaultMergedResolver = function defaultMergedResolver(parent, args, context, info) {\n  if (!parent) {\n    return null;\n  }\n\n  var responseKey = getResponseKeyFromInfo_1.getResponseKeyFromInfo(info);\n  var errorResult = errors_1.getErrorsFromParent(parent, responseKey);\n\n  if (errorResult.kind === 'OWN') {\n    throw error_1.locatedError(new Error(errorResult.error.message), info.fieldNodes, graphql_1.responsePathAsArray(info.path));\n  }\n\n  var result = parent[responseKey];\n\n  if (result == null) {\n    result = parent[info.fieldName];\n  } // subscription result mapping\n\n\n  if (!result && parent.data && parent.data[responseKey]) {\n    result = parent.data[responseKey];\n  }\n\n  if (errorResult.errors) {\n    result = errors_1.annotateWithChildrenErrors(result, errorResult.errors);\n  }\n\n  return result;\n};\n\nexports.default = defaultMergedResolver;","map":null,"metadata":{},"sourceType":"script"}