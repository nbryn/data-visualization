{"ast":null,"code":"import _regeneratorRuntime from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { NGO_GROUPS } from \"../ActionTypes\";\nimport { fetchFromServer } from \"../Fetch\";\nexport var fetchGroupsByNGO = function fetchGroupsByNGO(ngo) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var data, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = \"query{\\n        ngoGroupData{\\n          groupData(ngo: \".concat(ngo, \"){\\n            name\\n            cycle\\n            meetings\\n            shares\\n            loans\\n            owner\\n            admin                      \\n      }\\n      }\\n      }\");\n                _context.next = 3;\n                return fetchFromServer(\"post\", data);\n\n              case 3:\n                response = _context.sent;\n                dispatch({\n                  type: NGO_GROUPS,\n                  payload: response.data.data.ngoGroupData\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/src/redux/actions/ngo/NGOGroupsAction.js"],"names":["NGO_GROUPS","fetchFromServer","fetchGroupsByNGO","ngo","dispatch","data","response","type","payload","ngoGroupData"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,gBAA3B;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BC,gBAAAA,IAD+B,qEAGZF,GAHY;AAAA;AAAA,uBAedF,eAAe,CAAC,MAAD,EAASI,IAAT,CAfD;;AAAA;AAe/BC,gBAAAA,QAf+B;AAiBrCF,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEP,UADC;AAEPQ,kBAAAA,OAAO,EAAEF,QAAQ,CAACD,IAAT,CAAcA,IAAd,CAAmBI;AAFrB,iBAAD,CAAR;;AAjBqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["import { NGO_GROUPS } from \"../ActionTypes\";\nimport { fetchFromServer } from \"../Fetch\";\n\nexport const fetchGroupsByNGO = ngo => async dispatch => {\n  const data = `query{\n        ngoGroupData{\n          groupData(ngo: ${ngo}){\n            name\n            cycle\n            meetings\n            shares\n            loans\n            owner\n            admin                      \n      }\n      }\n      }`;\n\n  const response = await fetchFromServer(\"post\", data);\n\n  dispatch({\n    type: NGO_GROUPS,\n    payload: response.data.data.ngoGroupData\n  });\n};\n"]},"metadata":{},"sourceType":"module"}