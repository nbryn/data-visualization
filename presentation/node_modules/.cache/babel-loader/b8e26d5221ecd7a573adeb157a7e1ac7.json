{"ast":null,"code":"import _regeneratorRuntime from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ENGAGEMENT_STATS } from \"../ActionTypes\";\nimport { fetchFromServer } from \"../Fetch\";\nexport var fetchEngagementStats = function fetchEngagementStats() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var engagementStats, groupQuery, groupResponse, userQuery, userResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                engagementStats = {\n                  groupEngagement: \"\",\n                  userEngagement: \"\"\n                };\n                groupQuery = \"query{\\n    groupEngagement{\\n      groupsActive\\n      groupMeetingFrequency{\\n        value\\n        count\\n      }\\n  \\n    }\\n  }\";\n                _context.next = 4;\n                return fetchFromServer(\"post\", groupQuery);\n\n              case 4:\n                groupResponse = _context.sent;\n                engagementStats.groupEngagement = groupResponse.data.data;\n                userQuery = \"query{\\n    groupEngagement{\\n      groupsActive\\n      groupMeetingFrequency{\\n        value\\n        count\\n      }\\n  \\n    }\\n  }\";\n                _context.next = 9;\n                return fetchFromServer(\"post\", userQuery);\n\n              case 9:\n                userResponse = _context.sent;\n                engagementStats.userEngagement = userResponse.data.data;\n                console.log(engage);\n                dispatch({\n                  type: ENGAGEMENT_STATS,\n                  payload: engagementStats\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/src/redux/actions/kpi/EngagementStatsAction.js"],"names":["ENGAGEMENT_STATS","fetchFromServer","fetchEngagementStats","dispatch","engagementStats","groupEngagement","userEngagement","groupQuery","groupResponse","data","userQuery","userResponse","console","log","engage","type","payload"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gBAAjC;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCC,gBAAAA,eADoC,GAClB;AACpBC,kBAAAA,eAAe,EAAE,EADG;AAEpBC,kBAAAA,cAAc,EAAE;AAFI,iBADkB;AAMlCC,gBAAAA,UANkC;AAAA;AAAA,uBAiBZN,eAAe,CAAC,MAAD,EAASM,UAAT,CAjBH;;AAAA;AAiBlCC,gBAAAA,aAjBkC;AAmBxCJ,gBAAAA,eAAe,CAACC,eAAhB,GAAkCG,aAAa,CAACC,IAAd,CAAmBA,IAArD;AAEMC,gBAAAA,SArBkC;AAAA;AAAA,uBAgCbT,eAAe,CAAC,MAAD,EAASS,SAAT,CAhCF;;AAAA;AAgClCC,gBAAAA,YAhCkC;AAkCxCP,gBAAAA,eAAe,CAACE,cAAhB,GAAiCK,YAAY,CAACF,IAAb,CAAkBA,IAAnD;AAEAG,gBAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AAEAX,gBAAAA,QAAQ,CAAC;AACPY,kBAAAA,IAAI,EAAEf,gBADC;AAEPgB,kBAAAA,OAAO,EAAEZ;AAFF,iBAAD,CAAR;;AAtCwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B","sourcesContent":["import { ENGAGEMENT_STATS } from \"../ActionTypes\";\nimport { fetchFromServer } from \"../Fetch\";\n\nexport const fetchEngagementStats = () => async dispatch => {\n  let engagementStats = {\n    groupEngagement: \"\",\n    userEngagement: \"\"\n  };\n\n  const groupQuery = `query{\n    groupEngagement{\n      groupsActive\n      groupMeetingFrequency{\n        value\n        count\n      }\n  \n    }\n  }`;\n\n  const groupResponse = await fetchFromServer(\"post\", groupQuery);\n\n  engagementStats.groupEngagement = groupResponse.data.data;\n\n  const userQuery = `query{\n    groupEngagement{\n      groupsActive\n      groupMeetingFrequency{\n        value\n        count\n      }\n  \n    }\n  }`;\n\n  const userResponse = await fetchFromServer(\"post\", userQuery);\n\n  engagementStats.userEngagement = userResponse.data.data;\n\n  console.log(engage)\n\n  dispatch({\n    type: ENGAGEMENT_STATS,\n    payload: engagementStats\n  });\n};\n"]},"metadata":{},"sourceType":"module"}