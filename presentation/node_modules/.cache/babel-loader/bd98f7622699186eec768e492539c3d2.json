{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar deprecated_decorator_1 = require(\"deprecated-decorator\");\n\nvar _1 = require(\".\"); // takes a GraphQL-JS schema and an object of connectors, then attaches\n// the connectors to the context by wrapping each query or mutation resolve\n// function with a function that attaches connectors if they don't exist.\n// attaches connectors only once to make sure they are singletons\n\n\nvar attachConnectorsToContext = deprecated_decorator_1.deprecated({\n  version: '0.7.0',\n  url: 'https://github.com/apollostack/graphql-tools/issues/140'\n}, function (schema, connectors) {\n  if (!schema || !(schema instanceof graphql_1.GraphQLSchema)) {\n    throw new Error('schema must be an instance of GraphQLSchema. ' + 'This error could be caused by installing more than one version of GraphQL-JS');\n  }\n\n  if (typeof connectors !== 'object') {\n    var connectorType = typeof connectors;\n    throw new Error(\"Expected connectors to be of type object, got \" + connectorType);\n  }\n\n  if (Object.keys(connectors).length === 0) {\n    throw new Error('Expected connectors to not be an empty object');\n  }\n\n  if (Array.isArray(connectors)) {\n    throw new Error('Expected connectors to be of type object, got Array');\n  }\n\n  if (schema['_apolloConnectorsAttached']) {\n    throw new Error('Connectors already attached to context, cannot attach more than once');\n  }\n\n  schema['_apolloConnectorsAttached'] = true;\n\n  var attachconnectorFn = function attachconnectorFn(root, args, ctx) {\n    if (typeof ctx !== 'object') {\n      // if in any way possible, we should throw an error when the attachconnectors\n      // function is called, not when a query is executed.\n      var contextType = typeof ctx;\n      throw new Error(\"Cannot attach connector because context is not an object: \" + contextType);\n    }\n\n    if (typeof ctx.connectors === 'undefined') {\n      ctx.connectors = {};\n    }\n\n    Object.keys(connectors).forEach(function (connectorName) {\n      var connector = connectors[connectorName];\n\n      if (!!connector.prototype) {\n        ctx.connectors[connectorName] = new connector(ctx);\n      } else {\n        throw new Error(\"Connector must be a function or an class\");\n      }\n    });\n    return root;\n  };\n\n  _1.addSchemaLevelResolveFunction(schema, attachconnectorFn);\n});\nexports.default = attachConnectorsToContext;","map":null,"metadata":{},"sourceType":"script"}