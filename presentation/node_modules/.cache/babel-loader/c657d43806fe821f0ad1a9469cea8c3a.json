{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar implementsAbstractType_1 = require(\"../implementsAbstractType\");\n\nvar FilterToSchema =\n/** @class */\nfunction () {\n  function FilterToSchema(targetSchema) {\n    this.targetSchema = targetSchema;\n  }\n\n  FilterToSchema.prototype.transformRequest = function (originalRequest) {\n    var document = filterDocumentToSchema(this.targetSchema, originalRequest.document);\n    return __assign(__assign({}, originalRequest), {\n      document: document\n    });\n  };\n\n  return FilterToSchema;\n}();\n\nexports.default = FilterToSchema;\n\nfunction filterDocumentToSchema(targetSchema, document) {\n  var operations = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.OPERATION_DEFINITION;\n  });\n  var fragments = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION;\n  });\n  var usedFragments = [];\n  var newOperations = [];\n  var newFragments = [];\n  var validFragments = fragments.filter(function (fragment) {\n    var typeName = fragment.typeCondition.name.value;\n    return Boolean(targetSchema.getType(typeName));\n  });\n  var validFragmentsWithType = {};\n  validFragments.forEach(function (fragment) {\n    var typeName = fragment.typeCondition.name.value;\n    var type = targetSchema.getType(typeName);\n    validFragmentsWithType[fragment.name.value] = type;\n  });\n  var fragmentSet = Object.create(null);\n  operations.forEach(function (operation) {\n    var type;\n\n    if (operation.operation === 'subscription') {\n      type = targetSchema.getSubscriptionType();\n    } else if (operation.operation === 'mutation') {\n      type = targetSchema.getMutationType();\n    } else {\n      type = targetSchema.getQueryType();\n    }\n\n    var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, operation.selectionSet),\n        selectionSet = _a.selectionSet,\n        operationUsedFragments = _a.usedFragments,\n        operationUsedVariables = _a.usedVariables;\n\n    usedFragments = union(usedFragments, operationUsedFragments);\n\n    var _b = collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments),\n        collectedUsedVariables = _b.usedVariables,\n        collectedNewFragments = _b.newFragments,\n        collectedFragmentSet = _b.fragmentSet;\n\n    var fullUsedVariables = union(operationUsedVariables, collectedUsedVariables);\n    newFragments = collectedNewFragments;\n    fragmentSet = collectedFragmentSet;\n    var variableDefinitions = operation.variableDefinitions.filter(function (variable) {\n      return fullUsedVariables.indexOf(variable.variable.name.value) !== -1;\n    });\n    newOperations.push({\n      kind: graphql_1.Kind.OPERATION_DEFINITION,\n      operation: operation.operation,\n      name: operation.name,\n      directives: operation.directives,\n      variableDefinitions: variableDefinitions,\n      selectionSet: selectionSet\n    });\n  });\n  return {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: __spreadArrays(newOperations, newFragments)\n  };\n}\n\nfunction collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments) {\n  var usedVariables = [];\n  var newFragments = [];\n\n  var _loop_1 = function _loop_1() {\n    var nextFragmentName = usedFragments.pop();\n    var fragment = validFragments.find(function (fr) {\n      return fr.name.value === nextFragmentName;\n    });\n\n    if (fragment) {\n      var name_1 = nextFragmentName;\n      var typeName = fragment.typeCondition.name.value;\n      var type = targetSchema.getType(typeName);\n\n      var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, fragment.selectionSet),\n          selectionSet = _a.selectionSet,\n          fragmentUsedFragments = _a.usedFragments,\n          fragmentUsedVariables = _a.usedVariables;\n\n      usedFragments = union(usedFragments, fragmentUsedFragments);\n      usedVariables = union(usedVariables, fragmentUsedVariables);\n\n      if (!fragmentSet[name_1]) {\n        fragmentSet[name_1] = true;\n        newFragments.push({\n          kind: graphql_1.Kind.FRAGMENT_DEFINITION,\n          name: {\n            kind: graphql_1.Kind.NAME,\n            value: name_1\n          },\n          typeCondition: fragment.typeCondition,\n          selectionSet: selectionSet\n        });\n      }\n    }\n  };\n\n  while (usedFragments.length !== 0) {\n    _loop_1();\n  }\n\n  return {\n    usedVariables: usedVariables,\n    newFragments: newFragments,\n    fragmentSet: fragmentSet\n  };\n}\n\nfunction filterSelectionSet(schema, type, validFragments, selectionSet) {\n  var _a;\n\n  var usedFragments = [];\n  var usedVariables = [];\n  var typeStack = [type]; // Should be rewritten using visitWithSchema\n\n  var filteredSelectionSet = graphql_1.visit(selectionSet, (_a = {}, _a[graphql_1.Kind.FIELD] = {\n    enter: function enter(node) {\n      var parentType = resolveType(typeStack[typeStack.length - 1]);\n\n      if (parentType instanceof graphql_1.GraphQLObjectType || parentType instanceof graphql_1.GraphQLInterfaceType) {\n        var fields = parentType.getFields();\n        var field = node.name.value === '__typename' ? graphql_1.TypeNameMetaFieldDef : fields[node.name.value];\n\n        if (!field) {\n          return null;\n        } else {\n          typeStack.push(field.type);\n        }\n\n        var argNames_1 = (field.args || []).map(function (arg) {\n          return arg.name;\n        });\n\n        if (node.arguments) {\n          var args = node.arguments.filter(function (arg) {\n            return argNames_1.indexOf(arg.name.value) !== -1;\n          });\n\n          if (args.length !== node.arguments.length) {\n            return __assign(__assign({}, node), {\n              arguments: args\n            });\n          }\n        }\n      } else if (parentType instanceof graphql_1.GraphQLUnionType && node.name.value === '__typename') {\n        typeStack.push(graphql_1.TypeNameMetaFieldDef.type);\n      }\n    },\n    leave: function leave(node) {\n      var _a;\n\n      var currentType = typeStack.pop();\n      var resolvedType = resolveType(currentType);\n\n      if (resolvedType instanceof graphql_1.GraphQLObjectType || resolvedType instanceof graphql_1.GraphQLInterfaceType) {\n        var selections = node.selectionSet && node.selectionSet.selections || null;\n\n        if (!selections || selections.length === 0) {\n          // need to remove any added variables. Is there a better way to do this?\n          graphql_1.visit(node, (_a = {}, _a[graphql_1.Kind.VARIABLE] = function (variableNode) {\n            var index = usedVariables.indexOf(variableNode.name.value);\n\n            if (index !== -1) {\n              usedVariables.splice(index, 1);\n            }\n          }, _a));\n          return null;\n        }\n      }\n    }\n  }, _a[graphql_1.Kind.FRAGMENT_SPREAD] = function (node) {\n    if (node.name.value in validFragments) {\n      var parentType = resolveType(typeStack[typeStack.length - 1]);\n      var innerType = validFragments[node.name.value];\n\n      if (!implementsAbstractType_1.default(schema, parentType, innerType)) {\n        return null;\n      } else {\n        usedFragments.push(node.name.value);\n        return;\n      }\n    } else {\n      return null;\n    }\n  }, _a[graphql_1.Kind.INLINE_FRAGMENT] = {\n    enter: function enter(node) {\n      if (node.typeCondition) {\n        var innerType = schema.getType(node.typeCondition.name.value);\n        var parentType = resolveType(typeStack[typeStack.length - 1]);\n\n        if (implementsAbstractType_1.default(schema, parentType, innerType)) {\n          typeStack.push(innerType);\n        } else {\n          return null;\n        }\n      }\n    },\n    leave: function leave(node) {\n      typeStack.pop();\n    }\n  }, _a[graphql_1.Kind.VARIABLE] = function (node) {\n    usedVariables.push(node.name.value);\n  }, _a));\n  return {\n    selectionSet: filteredSelectionSet,\n    usedFragments: usedFragments,\n    usedVariables: usedVariables\n  };\n}\n\nfunction resolveType(type) {\n  var lastType = type;\n\n  while (lastType instanceof graphql_1.GraphQLNonNull || lastType instanceof graphql_1.GraphQLList) {\n    lastType = lastType.ofType;\n  }\n\n  return lastType;\n}\n\nfunction union() {\n  var arrays = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n\n  var cache = {};\n  var result = [];\n  arrays.forEach(function (array) {\n    array.forEach(function (item) {\n      if (!cache[item]) {\n        cache[item] = true;\n        result.push(item);\n      }\n    });\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}