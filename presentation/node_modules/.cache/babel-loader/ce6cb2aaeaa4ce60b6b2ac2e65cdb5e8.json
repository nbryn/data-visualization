{"ast":null,"code":"var _jsxFileName = \"/home/nbryn/Desktop/jamiipay/Projects/Own-Dashboard/presentation/src/components/dashboard/views/MeetingView.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { KPICard } from \"../util/KPICard\";\nimport Sidebar from \"../../navigation/Sidebar\";\nimport Header from \"../../navigation/Header\";\nimport TotalGraph from \"../charts/graph/TotalGraph\";\nimport LastMonthBar from \"../charts/bar/LastMonthBar\";\nimport LastYearBar from \"../charts/bar/LastYearBar\";\nimport { fetchMeetingStats } from \"../../../redux/actions/kpi/MeetingStatsAction\";\nimport { getCurrentTime } from \"../../../util/Date\";\n\nclass GroupView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.fetchData();\n    setInterval(async () => {\n      this.fetchData();\n    }, 10000000);\n  }\n\n  async fetchData() {\n    await this.props.fetchMeetingStats();\n    const meetingStats = this.props.meetingStats;\n    const lastMonth = meetingStats.meetingsLastMonth.data;\n    let lastUpdatedAt = getCurrentTime();\n    let meetingMonthCount = 0;\n    let meetingYearCount = 0;\n    lastMonth.forEach(element => meetingMonthCount += element.count);\n    meetingStats.meetingsLastYear.data.forEach(element => meetingYearCount += element.count);\n    this.setState({\n      meetingTotal: meetingStats.meetingTotal,\n      meetingsToday: lastMonth[lastMonth.length - 1].count,\n      meetingsTodayText: lastMonth[lastMonth.length - 1].day.day + \"/\" + lastMonth[lastMonth.length - 1].day.month,\n      meetingMonth: meetingMonthCount,\n      meetingYear: meetingYearCount,\n      meetingsLastMonth: lastMonth,\n      meetingsLastYear: meetingStats.meetingsLastYear.data,\n      lastUpdate: lastUpdatedAt\n    });\n  }\n\n  render() {\n    const KPICards = {\n      meetingTotal: {\n        text: \"Total Meetings\",\n        icon: \"pe-7s-user text-warning\"\n      },\n      meetingsToday: {\n        text: `Meetings ${this.state.meetingsTodayText}`,\n        icon: \"pe-7s-users text-info\"\n      },\n      meetingMonth: {\n        text: \"Last Month\",\n        icon: \"pe-7s-graph1 text-danger\"\n      },\n      meetingYear: {\n        text: \"Last Year\",\n        icon: \"pe-7s-wallet text-success\"\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"main-panel\",\n      className: \"main-panel\",\n      ref: \"mainPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Header, {\n      title: \"Meetings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, Object.keys(KPICards).map((element, index) => React.createElement(Col, {\n      lg: 3,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(KPICard, {\n      bigIcon: React.createElement(\"i\", {\n        className: KPICards[element].icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }),\n      statsText: KPICards[element].text,\n      statsValue: this.state[element],\n      statsIcon: React.createElement(\"i\", {\n        className: \"fa fa-refresh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      statsIconText: `Last Update: ${this.state.lastUpdate}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(TotalGraph, {\n      title: \"Total Meetings\",\n      stroke: \"#228b22\",\n      data: this.state.meetingsLastYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(LastMonthBar, {\n      title: \"Meetings Last Month\",\n      color: \"#228b22\",\n      data: this.state.meetingsLastMonth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(Col, {\n      lg: 4,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(LastYearBar, {\n      title: \"Meetings Last Year\",\n      color: \"#ff0000\",\n      data: this.state.meetingsLastYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    meetingStats: state.KPI.meetingStats\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchMeetingStats\n})(GroupView);","map":{"version":3,"sources":["/home/nbryn/Desktop/jamiipay/Projects/Own-Dashboard/presentation/src/components/dashboard/views/MeetingView.js"],"names":["React","Component","connect","Grid","Row","Col","KPICard","Sidebar","Header","TotalGraph","LastMonthBar","LastYearBar","fetchMeetingStats","getCurrentTime","GroupView","constructor","props","state","componentDidMount","fetchData","setInterval","meetingStats","lastMonth","meetingsLastMonth","data","lastUpdatedAt","meetingMonthCount","meetingYearCount","forEach","element","count","meetingsLastYear","setState","meetingTotal","meetingsToday","length","meetingsTodayText","day","month","meetingMonth","meetingYear","lastUpdate","render","KPICards","text","icon","Object","keys","map","index","mapStateToProps","KPI"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { KPICard } from \"../util/KPICard\";\n\nimport Sidebar from \"../../navigation/Sidebar\";\nimport Header from \"../../navigation/Header\";\n\nimport TotalGraph from \"../charts/graph/TotalGraph\";\n\nimport LastMonthBar from \"../charts/bar/LastMonthBar\";\nimport LastYearBar from \"../charts/bar/LastYearBar\";\n\nimport { fetchMeetingStats } from \"../../../redux/actions/kpi/MeetingStatsAction\";\nimport { getCurrentTime } from \"../../../util/Date\";\n\nclass GroupView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n  componentDidMount() {\n    this.fetchData();\n\n    setInterval(async () => {\n      this.fetchData();\n    }, 10000000);\n  }\n\n  async fetchData() {\n    await this.props.fetchMeetingStats();\n\n    const meetingStats = this.props.meetingStats;\n    const lastMonth = meetingStats.meetingsLastMonth.data;\n    let lastUpdatedAt = getCurrentTime();\n\n    let meetingMonthCount = 0;\n    let meetingYearCount = 0;\n\n    lastMonth.forEach(element => (meetingMonthCount += element.count));\n    meetingStats.meetingsLastYear.data.forEach(\n      element => (meetingYearCount += element.count)\n    );\n\n    this.setState({\n      meetingTotal: meetingStats.meetingTotal,\n      meetingsToday: lastMonth[lastMonth.length - 1].count,\n      meetingsTodayText:\n        lastMonth[lastMonth.length - 1].day.day +\n        \"/\" +\n        lastMonth[lastMonth.length - 1].day.month,\n      meetingMonth: meetingMonthCount,\n      meetingYear: meetingYearCount,\n      meetingsLastMonth: lastMonth,\n      meetingsLastYear: meetingStats.meetingsLastYear.data,\n      lastUpdate: lastUpdatedAt\n    });\n  }\n\n  render() {\n    const KPICards = {\n      meetingTotal: { text: \"Total Meetings\", icon: \"pe-7s-user text-warning\" },\n      meetingsToday: {\n        text: `Meetings ${this.state.meetingsTodayText}`,\n        icon: \"pe-7s-users text-info\"\n      },\n      meetingMonth: {\n        text: \"Last Month\",\n        icon: \"pe-7s-graph1 text-danger\"\n      },\n      meetingYear: { text: \"Last Year\", icon: \"pe-7s-wallet text-success\" }\n    };\n    return (\n      <div className=\"wrapper\">\n        <Sidebar />\n        <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\n          <Header title=\"Meetings\" />\n          <div className=\"content\">\n            <Grid fluid>\n              <Row>\n                {Object.keys(KPICards).map((element, index) => (\n                  <Col lg={3} sm={6}>\n                    <KPICard\n                      bigIcon={<i className={KPICards[element].icon} />}\n                      statsText={KPICards[element].text}\n                      statsValue={this.state[element]}\n                      statsIcon={<i className=\"fa fa-refresh\" />}\n                      statsIconText={`Last Update: ${this.state.lastUpdate}`}\n                    />\n                  </Col>\n                ))}\n              </Row>\n\n              <Row>\n                <Col lg={4} sm={6}>\n                  <TotalGraph\n                    title=\"Total Meetings\"\n                    stroke=\"#228b22\"\n                    data={this.state.meetingsLastYear}\n                  />\n                </Col>\n              </Row>\n              <Row>\n                <Col lg={4} sm={6}>\n                  <LastMonthBar\n                    title=\"Meetings Last Month\"\n                    color=\"#228b22\"\n                    data={this.state.meetingsLastMonth}\n                  />\n                </Col>\n\n                <Col lg={4} sm={6}>\n                  <LastYearBar\n                    title=\"Meetings Last Year\"\n                    color=\"#ff0000\"\n                    data={this.state.meetingsLastYear}\n                  />\n                </Col>\n              </Row>\n            </Grid>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    meetingStats: state.KPI.meetingStats\n  };\n};\n\nexport default connect(mapStateToProps, { fetchMeetingStats })(GroupView);\n"]},"metadata":{},"sourceType":"module"}