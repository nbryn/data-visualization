{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\");\n\nfunction concatenateTypeDefs(typeDefinitionsAry, calledFunctionRefs) {\n  if (calledFunctionRefs === void 0) {\n    calledFunctionRefs = [];\n  }\n\n  var resolvedTypeDefinitions = [];\n  typeDefinitionsAry.forEach(function (typeDef) {\n    if (typeDef.kind !== undefined) {\n      typeDef = graphql_1.print(typeDef);\n    }\n\n    if (typeof typeDef === 'function') {\n      if (calledFunctionRefs.indexOf(typeDef) === -1) {\n        calledFunctionRefs.push(typeDef);\n        resolvedTypeDefinitions = resolvedTypeDefinitions.concat(concatenateTypeDefs(typeDef(), calledFunctionRefs));\n      }\n    } else if (typeof typeDef === 'string') {\n      resolvedTypeDefinitions.push(typeDef.trim());\n    } else {\n      var type = typeof typeDef;\n      throw new _1.SchemaError(\"typeDef array must contain only strings and functions, got \" + type);\n    }\n  });\n  return uniq(resolvedTypeDefinitions.map(function (x) {\n    return x.trim();\n  })).join('\\n');\n}\n\nfunction uniq(array) {\n  return array.reduce(function (accumulator, currentValue) {\n    return accumulator.indexOf(currentValue) === -1 ? __spreadArrays(accumulator, [currentValue]) : accumulator;\n  }, []);\n}\n\nexports.default = concatenateTypeDefs;","map":null,"metadata":{},"sourceType":"script"}