{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar schemaRecreation_1 = require(\"../stitching/schemaRecreation\");\n\nvar VisitSchemaKind;\n\n(function (VisitSchemaKind) {\n  VisitSchemaKind[\"TYPE\"] = \"VisitSchemaKind.TYPE\";\n  VisitSchemaKind[\"SCALAR_TYPE\"] = \"VisitSchemaKind.SCALAR_TYPE\";\n  VisitSchemaKind[\"ENUM_TYPE\"] = \"VisitSchemaKind.ENUM_TYPE\";\n  VisitSchemaKind[\"COMPOSITE_TYPE\"] = \"VisitSchemaKind.COMPOSITE_TYPE\";\n  VisitSchemaKind[\"OBJECT_TYPE\"] = \"VisitSchemaKind.OBJECT_TYPE\";\n  VisitSchemaKind[\"INPUT_OBJECT_TYPE\"] = \"VisitSchemaKind.INPUT_OBJECT_TYPE\";\n  VisitSchemaKind[\"ABSTRACT_TYPE\"] = \"VisitSchemaKind.ABSTRACT_TYPE\";\n  VisitSchemaKind[\"UNION_TYPE\"] = \"VisitSchemaKind.UNION_TYPE\";\n  VisitSchemaKind[\"INTERFACE_TYPE\"] = \"VisitSchemaKind.INTERFACE_TYPE\";\n  VisitSchemaKind[\"ROOT_OBJECT\"] = \"VisitSchemaKind.ROOT_OBJECT\";\n  VisitSchemaKind[\"QUERY\"] = \"VisitSchemaKind.QUERY\";\n  VisitSchemaKind[\"MUTATION\"] = \"VisitSchemaKind.MUTATION\";\n  VisitSchemaKind[\"SUBSCRIPTION\"] = \"VisitSchemaKind.SUBSCRIPTION\";\n})(VisitSchemaKind = exports.VisitSchemaKind || (exports.VisitSchemaKind = {}));\n\nfunction visitSchema(schema, visitor, stripResolvers) {\n  var types = {};\n  var resolveType = schemaRecreation_1.createResolveType(function (name) {\n    if (typeof types[name] === 'undefined') {\n      throw new Error(\"Can't find type \" + name + \".\");\n    }\n\n    return types[name];\n  });\n  var queryType = schema.getQueryType();\n  var mutationType = schema.getMutationType();\n  var subscriptionType = schema.getSubscriptionType();\n  var typeMap = schema.getTypeMap();\n  Object.keys(typeMap).map(function (typeName) {\n    var type = typeMap[typeName];\n\n    if (graphql_1.isNamedType(type) && graphql_1.getNamedType(type).name.slice(0, 2) !== '__') {\n      var specifiers = getTypeSpecifiers(type, schema);\n      var typeVisitor = getVisitor(visitor, specifiers);\n\n      if (typeVisitor) {\n        var result = typeVisitor(type, schema);\n\n        if (typeof result === 'undefined') {\n          types[typeName] = schemaRecreation_1.recreateType(type, resolveType, !stripResolvers);\n        } else if (result === null) {\n          types[typeName] = null;\n        } else {\n          types[typeName] = schemaRecreation_1.recreateType(result, resolveType, !stripResolvers);\n        }\n      } else {\n        types[typeName] = schemaRecreation_1.recreateType(type, resolveType, !stripResolvers);\n      }\n    }\n  });\n  return new graphql_1.GraphQLSchema({\n    query: queryType ? types[queryType.name] : null,\n    mutation: mutationType ? types[mutationType.name] : null,\n    subscription: subscriptionType ? types[subscriptionType.name] : null,\n    types: Object.keys(types).map(function (name) {\n      return types[name];\n    })\n  });\n}\n\nexports.visitSchema = visitSchema;\n\nfunction getTypeSpecifiers(type, schema) {\n  var specifiers = [VisitSchemaKind.TYPE];\n\n  if (type instanceof graphql_1.GraphQLObjectType) {\n    specifiers.unshift(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.OBJECT_TYPE);\n    var query = schema.getQueryType();\n    var mutation = schema.getMutationType();\n    var subscription = schema.getSubscriptionType();\n\n    if (type === query) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.QUERY);\n    } else if (type === mutation) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.MUTATION);\n    } else if (type === subscription) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.SUBSCRIPTION);\n    }\n  } else if (type instanceof graphql_1.GraphQLInputObjectType) {\n    specifiers.push(VisitSchemaKind.INPUT_OBJECT_TYPE);\n  } else if (type instanceof graphql_1.GraphQLInterfaceType) {\n    specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.INTERFACE_TYPE);\n  } else if (type instanceof graphql_1.GraphQLUnionType) {\n    specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.UNION_TYPE);\n  } else if (type instanceof graphql_1.GraphQLEnumType) {\n    specifiers.push(VisitSchemaKind.ENUM_TYPE);\n  } else if (type instanceof graphql_1.GraphQLScalarType) {\n    specifiers.push(VisitSchemaKind.SCALAR_TYPE);\n  }\n\n  return specifiers;\n}\n\nfunction getVisitor(visitor, specifiers) {\n  var typeVisitor = null;\n\n  var stack = __spreadArrays(specifiers);\n\n  while (!typeVisitor && stack.length > 0) {\n    var next = stack.pop();\n    typeVisitor = visitor[next];\n  }\n\n  return typeVisitor;\n}","map":null,"metadata":{},"sourceType":"script"}