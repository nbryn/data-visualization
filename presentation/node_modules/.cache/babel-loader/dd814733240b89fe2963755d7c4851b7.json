{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\"); // If we have any union or interface types throw if no there is no resolveType or isTypeOf resolvers\n\n\nfunction checkForResolveTypeResolver(schema, requireResolversForResolveType) {\n  Object.keys(schema.getTypeMap()).map(function (typeName) {\n    return schema.getType(typeName);\n  }).forEach(function (type) {\n    if (!(type instanceof graphql_1.GraphQLUnionType || type instanceof graphql_1.GraphQLInterfaceType)) {\n      return;\n    }\n\n    if (!type.resolveType) {\n      if (requireResolversForResolveType === false) {\n        return;\n      }\n\n      if (requireResolversForResolveType === true) {\n        throw new _1.SchemaError(\"Type \\\"\" + type.name + \"\\\" is missing a \\\"resolveType\\\" resolver\");\n      } // tslint:disable-next-line:max-line-length\n\n\n      console.warn(\"Type \\\"\" + type.name + \"\\\" is missing a \\\"__resolveType\\\" resolver. Pass false into \" + \"\\\"resolverValidationOptions.requireResolversForResolveType\\\" to disable this warning.\");\n    }\n  });\n}\n\nexports.default = checkForResolveTypeResolver;","map":null,"metadata":{},"sourceType":"script"}