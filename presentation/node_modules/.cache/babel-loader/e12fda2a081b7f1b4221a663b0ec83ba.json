{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar visitSchema_1 = require(\"../transforms/visitSchema\"); // Transformation used to modifiy `GraphQLEnumType` values in a schema.\n\n\nvar ConvertEnumValues =\n/** @class */\nfunction () {\n  function ConvertEnumValues(enumValueMap) {\n    this.enumValueMap = enumValueMap;\n  } // Walk a schema looking for `GraphQLEnumType` types. If found, and\n  // matching types have been identified in `this.enumValueMap`, create new\n  // `GraphQLEnumType` types using the `this.enumValueMap` specified new\n  // values, and return them in the new schema.\n\n\n  ConvertEnumValues.prototype.transformSchema = function (schema) {\n    var _a;\n\n    var enumValueMap = this.enumValueMap;\n\n    if (!enumValueMap || Object.keys(enumValueMap).length === 0) {\n      return schema;\n    }\n\n    var transformedSchema = visitSchema_1.visitSchema(schema, (_a = {}, _a[visitSchema_1.VisitSchemaKind.ENUM_TYPE] = function (enumType) {\n      var externalToInternalValueMap = enumValueMap[enumType.name];\n\n      if (externalToInternalValueMap) {\n        var values = enumType.getValues();\n        var newValues_1 = {};\n        values.forEach(function (value) {\n          var newValue = Object.keys(externalToInternalValueMap).includes(value.name) ? externalToInternalValueMap[value.name] : value.name;\n          newValues_1[value.name] = {\n            value: newValue,\n            deprecationReason: value.deprecationReason,\n            description: value.description,\n            astNode: value.astNode\n          };\n        });\n        return new graphql_1.GraphQLEnumType({\n          name: enumType.name,\n          description: enumType.description,\n          astNode: enumType.astNode,\n          values: newValues_1\n        });\n      }\n\n      return enumType;\n    }, _a));\n    return transformedSchema;\n  };\n\n  return ConvertEnumValues;\n}();\n\nexports.default = ConvertEnumValues;","map":null,"metadata":{},"sourceType":"script"}