{"ast":null,"code":"import _regeneratorRuntime from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport { KEY_STATS } from \"../ActionTypes\";\nvar url = \"/graphql\";\nexport var fetchKeyStats = function fetchKeyStats() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var keyStats, groupQuery, groupResponse, userQuery, userResponse, data, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                keyStats = {\n                  groupStats: \"\",\n                  userStats: \"\",\n                  genderStats: \"\",\n                  shareStats: \"\",\n                  meetingStats: \"\"\n                };\n                _context.prev = 1;\n                groupQuery = \"query{\\n    groupStats{\\n      groupTotal    \\n     groupsLastMonth{\\n        data{\\n          count\\n          day{\\n            year\\n            month\\n            day\\n          }     \\n        }\\n    }\\n    groupsLastYear{\\n        data{\\n          month\\n          count  \\n        }\\n      }\\n      \\n    }\\n    }\";\n                _context.next = 5;\n                return axios({\n                  url: url,\n                  method: \"post\",\n                  data: {\n                    query: groupQuery\n                  }\n                });\n\n              case 5:\n                groupResponse = _context.sent;\n                keyStats.groupStats = groupResponse.data.data.groupStats;\n                userQuery = \"query{\\n      userStats{\\n        userCount   \\n       \\n      }\";\n                _context.next = 10;\n                return axios({\n                  url: url,\n                  method: \"post\",\n                  data: {\n                    query: userQuery\n                  }\n                });\n\n              case 10:\n                userResponse = _context.sent;\n                console.log(userResponse);\n                data = \"query{\\n    keyStats{\\n      userTotal\\n      groupTotal\\n      meetingTotal\\n      shareTotal\\n      userGender{\\n        value\\n        count\\n       }\\n       usersLastYear{\\n        data{\\n          month\\n          count\\n        }\\n      }  \\n     groupsLastMonth{\\n        data{\\n          count\\n          day{\\n            year\\n            month\\n            day\\n          }     \\n        }\\n    }\\n    groupsLastYear{\\n        data{\\n          month\\n          count  \\n        }\\n      }\\n    meetingsLastYear{\\n        data{\\n          month\\n          count\\n        }\\n      }\\n        \\n    }\\n    }\";\n                _context.next = 15;\n                return axios({\n                  url: url,\n                  method: \"post\",\n                  data: {\n                    query: data\n                  }\n                });\n\n              case 15:\n                response = _context.sent;\n                dispatch({\n                  type: KEY_STATS,\n                  payload: response.data.data.keyStats\n                });\n                _context.next = 22;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 19]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/nbryn/Desktop/jamiipay/jamiipay-web-dashboard/presentation/src/redux/actions/kpi/KeyStatsAction.js"],"names":["axios","KEY_STATS","url","fetchKeyStats","dispatch","keyStats","groupStats","userStats","genderStats","shareStats","meetingStats","groupQuery","method","data","query","groupResponse","userQuery","userResponse","console","log","response","type","payload"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,IAAMC,GAAG,GAAG,UAAZ;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,gBAAAA,QAD6B,GAClB;AACbC,kBAAAA,UAAU,EAAE,EADC;AAEbC,kBAAAA,SAAS,EAAE,EAFE;AAGbC,kBAAAA,WAAW,EAAE,EAHA;AAIbC,kBAAAA,UAAU,EAAE,EAJC;AAKbC,kBAAAA,YAAY,EAAE;AALD,iBADkB;AAAA;AASzBC,gBAAAA,UATyB;AAAA;AAAA,uBAkCTX,KAAK,CAAC;AAC1BE,kBAAAA,GAAG,EAAHA,GAD0B;AAE1BU,kBAAAA,MAAM,EAAE,MAFkB;AAG1BC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAEH;AADH;AAHoB,iBAAD,CAlCI;;AAAA;AAkC/BI,gBAAAA,aAlC+B;AA0C/BV,gBAAAA,QAAQ,CAACC,UAAT,GAAsBS,aAAa,CAACF,IAAd,CAAmBA,IAAnB,CAAwBP,UAA9C;AAEMU,gBAAAA,SA5CyB;AAAA;AAAA,uBAoDVhB,KAAK,CAAC;AACzBE,kBAAAA,GAAG,EAAHA,GADyB;AAEzBU,kBAAAA,MAAM,EAAE,MAFiB;AAGzBC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAEE;AADH;AAHmB,iBAAD,CApDK;;AAAA;AAoD/BC,gBAAAA,YApD+B;AA4D/BC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAEMJ,gBAAAA,IA9DyB;AAAA;AAAA,uBA0Gdb,KAAK,CAAC;AACrBE,kBAAAA,GAAG,EAAHA,GADqB;AAErBU,kBAAAA,MAAM,EAAE,MAFa;AAGrBC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAED;AADH;AAHe,iBAAD,CA1GS;;AAAA;AA0G/BO,gBAAAA,QA1G+B;AAkH/BhB,gBAAAA,QAAQ,CAAC;AACPiB,kBAAAA,IAAI,EAAEpB,SADC;AAEPqB,kBAAAA,OAAO,EAAEF,QAAQ,CAACP,IAAT,CAAcA,IAAd,CAAmBR;AAFrB,iBAAD,CAAR;AAlH+B;AAAA;;AAAA;AAAA;AAAA;AAuH/Ba,gBAAAA,OAAO,CAACC,GAAR;;AAvH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import axios from \"axios\";\nimport { KEY_STATS } from \"../ActionTypes\";\n\nconst url = \"/graphql\";\n\nexport const fetchKeyStats = () => async dispatch => {\n  let keyStats = {\n    groupStats: \"\",\n    userStats: \"\",\n    genderStats: \"\",\n    shareStats: \"\",\n    meetingStats: \"\"\n  };\n  try {\n    const groupQuery = `query{\n    groupStats{\n      groupTotal    \n     groupsLastMonth{\n        data{\n          count\n          day{\n            year\n            month\n            day\n          }     \n        }\n    }\n    groupsLastYear{\n        data{\n          month\n          count  \n        }\n      }\n      \n    }\n    }`;\n\n    let groupResponse;\n\n    groupResponse = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: groupQuery\n      }\n    });\n\n    keyStats.groupStats = groupResponse.data.data.groupStats;\n\n    const userQuery = `query{\n      userStats{\n        userCount   \n       \n      }`;\n\n    let userResponse;\n\n    userResponse = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: userQuery\n      }\n    });\n\n    console.log(userResponse);\n\n    const data = `query{\n    keyStats{\n      userTotal\n      groupTotal\n      meetingTotal\n      shareTotal\n      userGender{\n        value\n        count\n       }\n       usersLastYear{\n        data{\n          month\n          count\n        }\n      }  \n     groupsLastMonth{\n        data{\n          count\n          day{\n            year\n            month\n            day\n          }     \n        }\n    }\n    groupsLastYear{\n        data{\n          month\n          count  \n        }\n      }\n    meetingsLastYear{\n        data{\n          month\n          count\n        }\n      }\n        \n    }\n    }`;\n\n    let response;\n\n    response = await axios({\n      url,\n      method: \"post\",\n      data: {\n        query: data\n      }\n    });\n\n    dispatch({\n      type: KEY_STATS,\n      payload: response.data.data.keyStats\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}