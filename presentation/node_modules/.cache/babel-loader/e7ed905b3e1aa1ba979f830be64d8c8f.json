{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n/*\n * fn: The function to decorate with the logger\n * logger: an object instance of type Logger\n * hint: an optional hint to add to the error's message\n */\n\n\nfunction decorateWithLogger(fn, logger, hint) {\n  if (typeof fn === 'undefined') {\n    fn = graphql_1.defaultFieldResolver;\n  }\n\n  var logError = function logError(e) {\n    // TODO: clone the error properly\n    var newE = new Error();\n    newE.stack = e.stack;\n    /* istanbul ignore else: always get the hint from addErrorLoggingToSchema */\n\n    if (hint) {\n      newE['originalMessage'] = e.message;\n      newE['message'] = \"Error in resolver \" + hint + \"\\n\" + e.message;\n    }\n\n    logger.log(newE);\n  };\n\n  return function (root, args, ctx, info) {\n    try {\n      var result = fn(root, args, ctx, info); // If the resolve function returns a Promise log any Promise rejects.\n\n      if (result && typeof result.then === 'function' && typeof result.catch === 'function') {\n        result.catch(function (reason) {\n          // make sure that it's an error we're logging.\n          var error = reason instanceof Error ? reason : new Error(reason);\n          logError(error); // We don't want to leave an unhandled exception so pass on error.\n\n          return reason;\n        });\n      }\n\n      return result;\n    } catch (e) {\n      logError(e); // we want to pass on the error, just in case.\n\n      throw e;\n    }\n  };\n}\n\nexports.default = decorateWithLogger;","map":null,"metadata":{},"sourceType":"script"}